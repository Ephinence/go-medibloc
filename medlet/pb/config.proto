syntax = "proto3";
package medletpb;

import "github.com/medibloc/go-medibloc/net/pb/message.proto";

// Med global configurations.
message Config {
    // Global config
    GlobalConfig global = 1;
    // Network config.
    NetworkConfig network  = 2;
    // Chain config.
    ChainConfig chain = 3;
    // RPC config.
    RPCConfig rpc = 4;
    // Stats config.
    StatsConfig stats = 100;
    // Misc config.
    MiscConfig misc = 101;
    // App Config.
    AppConfig app = 102;
    // Sync Service Config.
    SyncConfig sync = 200;
}

message GlobalConfig {
    // ChainID.
    uint32 chain_id = 1;
    // Data dir.
    string datadir = 11;
    // Crypto algorithm
    uint32 crypto_alg = 20;
    // Hash algorithm
    uint32 hash_alg = 21;
}

message NetworkConfig {
    // Listen addresses. 	ie: "/ip4/0.0.0.0/tcp/9000"
    repeated string listens = 1;
    // Network node privateKey address. If nil, generate a new node.
    string network_key_file = 2;

    // Seed node's peerID and address
    repeated netpb.PeerInfo seeds = 11;
    // bootstrap trying period - seconds
    uint32 bootstrap_period = 12;
    // If connection is lower than minimum, try bootstrap
    uint32 minimum_connections = 13;

    // file name of peer store cache
    string cache_file = 21;
    // saving cache period
    uint32 cache_period = 22;

    uint32 conn_mgr_low_water_mark = 31;
    uint32 conn_mgr_high_water_mark = 32;
    uint32 conn_mgr_grace_period = 33;

    uint32 max_read_concurrency = 34;
    uint32 max_write_concurrency = 35;
}

message ChainConfig {
    // genesis conf file path
    string genesis = 2;

    // Key dir.
    string keydir = 12;

    // start mine at launch
    bool start_mine = 20;

    // Supported signature cipher list. ["ECC_SECP256K1"]
    repeated string signature_ciphers = 24;

    // Block cache size
    uint32 block_cache_size = 25;
    // Tail cache size
    uint32 tail_cache_size = 26;
    // Blockpool size
    uint32 block_pool_size = 27;
    // Transaction pool size
    uint32 transaction_pool_size = 28;

    // Proposer list for multi proposer
    repeated ProposerConfig proposers = 30;

}

message ProposerConfig {
    // Proposer.
    string proposer = 1;
    // Proposer private key.
    string privkey = 2;
    // Coinbase.
    string coinbase = 3;

    // Key dir.
    string keydir = 11;
    // Passphrase.
    string passphrase = 12;
}

message RPCConfig {
    // RPC listen addresses.
    repeated string rpc_listen = 1;
    // HTTP listen addresses.
    repeated string http_listen = 2;
    // Enabled HTTP modules.["api", "admin"]
    repeated string http_module = 3;
    // Connection limit.
    int32 connection_limits = 4;
}

message AppConfig {
    // log level
    string log_level = 1;
    // log file path
    string log_file = 2;
    // log file age, unit is s.
    uint32 log_age = 3;
    // pprof config
    PprofConfig pprof = 4;

    // App version
    string version = 100;
}

message PprofConfig {
    // pprof listen address, if not configured, the function closes.
    string http_listen = 1;
    // cpu profiling file, if not configured, the profiling not start
    string cpuprofile = 2;
    // memory profiling file, if not configured, the profiling not start
    string memprofile = 3;
}

message MiscConfig {
    // Default encryption ciper when create new keystore file.
    string default_keystore_file_ciper = 1;
}

message StatsConfig {
    // Enable metrics of not.
    bool enable_metrics = 1;

    // Reporting modules.
    enum ReportingModule {
        Influxdb = 0;
    }
    repeated ReportingModule reporting_module = 2;

    // Influxdb config.
    InfluxdbConfig influxdb = 11;

    repeated string metrics_tags = 12;
}

message InfluxdbConfig {
    // Host.
    string host = 1;
    // Port.
    uint32 port = 2;
    // Database name.
    string db = 3;
    // Auth user.
    string user = 4;
    // Auth password.
    string password = 5;
}

message SyncConfig {
    // Waiting time for response after send message to peer (seconds)
    uint32 response_time_limit = 1;
    // If the request fails, retry this number of times
    uint32 number_of_retries = 2;
    // Maximum Number of concurrent download
    uint32 active_download_limit = 3;

    // Height gap to activate download
    uint64 sync_activation_height = 20;
    // Height gap to activate download
    uint64 sync_activation_lib_gap = 21;
}