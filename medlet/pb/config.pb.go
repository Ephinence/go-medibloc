// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
Package medletpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	GlobalConfig
	NetworkConfig
	ChainConfig
	ProposerConfig
	RPCConfig
	AppConfig
	PprofConfig
	MiscConfig
	StatsConfig
	InfluxdbConfig
	SyncConfig
*/
package medletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import netpb "github.com/medibloc/go-medibloc/net/pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reporting modules.
type StatsConfig_ReportingModule int32

const (
	StatsConfig_Influxdb StatsConfig_ReportingModule = 0
)

var StatsConfig_ReportingModule_name = map[int32]string{
	0: "Influxdb",
}
var StatsConfig_ReportingModule_value = map[string]int32{
	"Influxdb": 0,
}

func (x StatsConfig_ReportingModule) String() string {
	return proto.EnumName(StatsConfig_ReportingModule_name, int32(x))
}
func (StatsConfig_ReportingModule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{9, 0}
}

// Med global configurations.
type Config struct {
	// Global config
	Global *GlobalConfig `protobuf:"bytes,1,opt,name=global" json:"global,omitempty"`
	// Network config.
	Network *NetworkConfig `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	// Chain config.
	Chain *ChainConfig `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
	// RPC config.
	Rpc *RPCConfig `protobuf:"bytes,4,opt,name=rpc" json:"rpc,omitempty"`
	// Stats config.
	Stats *StatsConfig `protobuf:"bytes,100,opt,name=stats" json:"stats,omitempty"`
	// Misc config.
	Misc *MiscConfig `protobuf:"bytes,101,opt,name=misc" json:"misc,omitempty"`
	// App Config.
	App *AppConfig `protobuf:"bytes,102,opt,name=app" json:"app,omitempty"`
	// Sync Service Config.
	Sync *SyncConfig `protobuf:"bytes,200,opt,name=sync" json:"sync,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetGlobal() *GlobalConfig {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *Config) GetNetwork() *NetworkConfig {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Config) GetChain() *ChainConfig {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *Config) GetRpc() *RPCConfig {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetStats() *StatsConfig {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Config) GetMisc() *MiscConfig {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *Config) GetApp() *AppConfig {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *Config) GetSync() *SyncConfig {
	if m != nil {
		return m.Sync
	}
	return nil
}

type GlobalConfig struct {
	// ChainID.
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Data dir.
	Datadir string `protobuf:"bytes,11,opt,name=datadir,proto3" json:"datadir,omitempty"`
	// Crypto algorithm
	CryptoAlg uint32 `protobuf:"varint,20,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Hash algorithm
	HashAlg uint32 `protobuf:"varint,21,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
}

func (m *GlobalConfig) Reset()                    { *m = GlobalConfig{} }
func (m *GlobalConfig) String() string            { return proto.CompactTextString(m) }
func (*GlobalConfig) ProtoMessage()               {}
func (*GlobalConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *GlobalConfig) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GlobalConfig) GetDatadir() string {
	if m != nil {
		return m.Datadir
	}
	return ""
}

func (m *GlobalConfig) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *GlobalConfig) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

type NetworkConfig struct {
	// Listen addresses. 	ie: "/ip4/0.0.0.0/tcp/9000"
	Listens []string `protobuf:"bytes,1,rep,name=listens" json:"listens,omitempty"`
	// Network node privateKey address. If nil, generate a new node.
	NetworkKeyFile string `protobuf:"bytes,2,opt,name=network_key_file,json=networkKeyFile,proto3" json:"network_key_file,omitempty"`
	// Seed node's peerID and address
	Seeds []*netpb.PeerInfo `protobuf:"bytes,11,rep,name=seeds" json:"seeds,omitempty"`
	// bootstrap trying period - seconds
	BootstrapPeriod uint32 `protobuf:"varint,12,opt,name=bootstrap_period,json=bootstrapPeriod,proto3" json:"bootstrap_period,omitempty"`
	// If connection is lower than minimum, try bootstrap
	MinimumConnections uint32 `protobuf:"varint,13,opt,name=minimum_connections,json=minimumConnections,proto3" json:"minimum_connections,omitempty"`
	// file name of peer store cache
	CacheFile string `protobuf:"bytes,21,opt,name=cache_file,json=cacheFile,proto3" json:"cache_file,omitempty"`
	// saving cache period
	CachePeriod          uint32 `protobuf:"varint,22,opt,name=cache_period,json=cachePeriod,proto3" json:"cache_period,omitempty"`
	ConnMgrLowWaterMark  uint32 `protobuf:"varint,31,opt,name=conn_mgr_low_water_mark,json=connMgrLowWaterMark,proto3" json:"conn_mgr_low_water_mark,omitempty"`
	ConnMgrHighWaterMark uint32 `protobuf:"varint,32,opt,name=conn_mgr_high_water_mark,json=connMgrHighWaterMark,proto3" json:"conn_mgr_high_water_mark,omitempty"`
	ConnMgrGracePeriod   uint32 `protobuf:"varint,33,opt,name=conn_mgr_grace_period,json=connMgrGracePeriod,proto3" json:"conn_mgr_grace_period,omitempty"`
	MaxReadConcurrency   uint32 `protobuf:"varint,34,opt,name=max_read_concurrency,json=maxReadConcurrency,proto3" json:"max_read_concurrency,omitempty"`
	MaxWriteConcurrency  uint32 `protobuf:"varint,35,opt,name=max_write_concurrency,json=maxWriteConcurrency,proto3" json:"max_write_concurrency,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *NetworkConfig) GetListens() []string {
	if m != nil {
		return m.Listens
	}
	return nil
}

func (m *NetworkConfig) GetNetworkKeyFile() string {
	if m != nil {
		return m.NetworkKeyFile
	}
	return ""
}

func (m *NetworkConfig) GetSeeds() []*netpb.PeerInfo {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *NetworkConfig) GetBootstrapPeriod() uint32 {
	if m != nil {
		return m.BootstrapPeriod
	}
	return 0
}

func (m *NetworkConfig) GetMinimumConnections() uint32 {
	if m != nil {
		return m.MinimumConnections
	}
	return 0
}

func (m *NetworkConfig) GetCacheFile() string {
	if m != nil {
		return m.CacheFile
	}
	return ""
}

func (m *NetworkConfig) GetCachePeriod() uint32 {
	if m != nil {
		return m.CachePeriod
	}
	return 0
}

func (m *NetworkConfig) GetConnMgrLowWaterMark() uint32 {
	if m != nil {
		return m.ConnMgrLowWaterMark
	}
	return 0
}

func (m *NetworkConfig) GetConnMgrHighWaterMark() uint32 {
	if m != nil {
		return m.ConnMgrHighWaterMark
	}
	return 0
}

func (m *NetworkConfig) GetConnMgrGracePeriod() uint32 {
	if m != nil {
		return m.ConnMgrGracePeriod
	}
	return 0
}

func (m *NetworkConfig) GetMaxReadConcurrency() uint32 {
	if m != nil {
		return m.MaxReadConcurrency
	}
	return 0
}

func (m *NetworkConfig) GetMaxWriteConcurrency() uint32 {
	if m != nil {
		return m.MaxWriteConcurrency
	}
	return 0
}

type ChainConfig struct {
	// genesis conf file path
	Genesis string `protobuf:"bytes,2,opt,name=genesis,proto3" json:"genesis,omitempty"`
	// Key dir.
	Keydir string `protobuf:"bytes,12,opt,name=keydir,proto3" json:"keydir,omitempty"`
	// start mine at launch
	StartMine bool `protobuf:"varint,20,opt,name=start_mine,json=startMine,proto3" json:"start_mine,omitempty"`
	// Supported signature cipher list. ["ECC_SECP256K1"]
	SignatureCiphers []string `protobuf:"bytes,24,rep,name=signature_ciphers,json=signatureCiphers" json:"signature_ciphers,omitempty"`
	// Block cache size
	BlockCacheSize uint32 `protobuf:"varint,25,opt,name=block_cache_size,json=blockCacheSize,proto3" json:"block_cache_size,omitempty"`
	// Tail cache size
	TailCacheSize uint32 `protobuf:"varint,26,opt,name=tail_cache_size,json=tailCacheSize,proto3" json:"tail_cache_size,omitempty"`
	// Blockpool size
	BlockPoolSize uint32 `protobuf:"varint,27,opt,name=block_pool_size,json=blockPoolSize,proto3" json:"block_pool_size,omitempty"`
	// Transaction pool size
	TransactionPoolSize uint32 `protobuf:"varint,28,opt,name=transaction_pool_size,json=transactionPoolSize,proto3" json:"transaction_pool_size,omitempty"`
	// TODO account manager
	// Proposer private key.
	Privkey string `protobuf:"bytes,29,opt,name=privkey,proto3" json:"privkey,omitempty"`
	// Proposer list for multi proposer
	Proposers []*ProposerConfig `protobuf:"bytes,30,rep,name=proposers" json:"proposers,omitempty"`
}

func (m *ChainConfig) Reset()                    { *m = ChainConfig{} }
func (m *ChainConfig) String() string            { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()               {}
func (*ChainConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *ChainConfig) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *ChainConfig) GetKeydir() string {
	if m != nil {
		return m.Keydir
	}
	return ""
}

func (m *ChainConfig) GetStartMine() bool {
	if m != nil {
		return m.StartMine
	}
	return false
}

func (m *ChainConfig) GetSignatureCiphers() []string {
	if m != nil {
		return m.SignatureCiphers
	}
	return nil
}

func (m *ChainConfig) GetBlockCacheSize() uint32 {
	if m != nil {
		return m.BlockCacheSize
	}
	return 0
}

func (m *ChainConfig) GetTailCacheSize() uint32 {
	if m != nil {
		return m.TailCacheSize
	}
	return 0
}

func (m *ChainConfig) GetBlockPoolSize() uint32 {
	if m != nil {
		return m.BlockPoolSize
	}
	return 0
}

func (m *ChainConfig) GetTransactionPoolSize() uint32 {
	if m != nil {
		return m.TransactionPoolSize
	}
	return 0
}

func (m *ChainConfig) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ChainConfig) GetProposers() []*ProposerConfig {
	if m != nil {
		return m.Proposers
	}
	return nil
}

type ProposerConfig struct {
	// Proposer.
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// Proposer private key.
	Privkey string `protobuf:"bytes,2,opt,name=privkey,proto3" json:"privkey,omitempty"`
	// Coinbase.
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Key dir.
	Keydir string `protobuf:"bytes,11,opt,name=keydir,proto3" json:"keydir,omitempty"`
	// Passphrase.
	Passphrase string `protobuf:"bytes,12,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *ProposerConfig) Reset()                    { *m = ProposerConfig{} }
func (m *ProposerConfig) String() string            { return proto.CompactTextString(m) }
func (*ProposerConfig) ProtoMessage()               {}
func (*ProposerConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *ProposerConfig) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ProposerConfig) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ProposerConfig) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *ProposerConfig) GetKeydir() string {
	if m != nil {
		return m.Keydir
	}
	return ""
}

func (m *ProposerConfig) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type RPCConfig struct {
	// RPC listen addresses.
	RpcListen []string `protobuf:"bytes,1,rep,name=rpc_listen,json=rpcListen" json:"rpc_listen,omitempty"`
	// HTTP listen addresses.
	HttpListen []string `protobuf:"bytes,2,rep,name=http_listen,json=httpListen" json:"http_listen,omitempty"`
	// Enabled HTTP modules.["api", "admin"]
	HttpModule []string `protobuf:"bytes,3,rep,name=http_module,json=httpModule" json:"http_module,omitempty"`
	// Connection limit.
	ConnectionLimits int32 `protobuf:"varint,4,opt,name=connection_limits,json=connectionLimits,proto3" json:"connection_limits,omitempty"`
}

func (m *RPCConfig) Reset()                    { *m = RPCConfig{} }
func (m *RPCConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCConfig) ProtoMessage()               {}
func (*RPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *RPCConfig) GetRpcListen() []string {
	if m != nil {
		return m.RpcListen
	}
	return nil
}

func (m *RPCConfig) GetHttpListen() []string {
	if m != nil {
		return m.HttpListen
	}
	return nil
}

func (m *RPCConfig) GetHttpModule() []string {
	if m != nil {
		return m.HttpModule
	}
	return nil
}

func (m *RPCConfig) GetConnectionLimits() int32 {
	if m != nil {
		return m.ConnectionLimits
	}
	return 0
}

type AppConfig struct {
	// log level
	LogLevel string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// log file path
	LogFile string `protobuf:"bytes,2,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`
	// log file age, unit is s.
	LogAge uint32 `protobuf:"varint,3,opt,name=log_age,json=logAge,proto3" json:"log_age,omitempty"`
	// pprof config
	Pprof *PprofConfig `protobuf:"bytes,4,opt,name=pprof" json:"pprof,omitempty"`
	// App version
	Version string `protobuf:"bytes,100,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *AppConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *AppConfig) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *AppConfig) GetLogAge() uint32 {
	if m != nil {
		return m.LogAge
	}
	return 0
}

func (m *AppConfig) GetPprof() *PprofConfig {
	if m != nil {
		return m.Pprof
	}
	return nil
}

func (m *AppConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PprofConfig struct {
	// pprof listen address, if not configured, the function closes.
	HttpListen string `protobuf:"bytes,1,opt,name=http_listen,json=httpListen,proto3" json:"http_listen,omitempty"`
	// cpu profiling file, if not configured, the profiling not start
	Cpuprofile string `protobuf:"bytes,2,opt,name=cpuprofile,proto3" json:"cpuprofile,omitempty"`
	// memory profiling file, if not configured, the profiling not start
	Memprofile string `protobuf:"bytes,3,opt,name=memprofile,proto3" json:"memprofile,omitempty"`
}

func (m *PprofConfig) Reset()                    { *m = PprofConfig{} }
func (m *PprofConfig) String() string            { return proto.CompactTextString(m) }
func (*PprofConfig) ProtoMessage()               {}
func (*PprofConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{7} }

func (m *PprofConfig) GetHttpListen() string {
	if m != nil {
		return m.HttpListen
	}
	return ""
}

func (m *PprofConfig) GetCpuprofile() string {
	if m != nil {
		return m.Cpuprofile
	}
	return ""
}

func (m *PprofConfig) GetMemprofile() string {
	if m != nil {
		return m.Memprofile
	}
	return ""
}

type MiscConfig struct {
	// Default encryption ciper when create new keystore file.
	DefaultKeystoreFileCiper string `protobuf:"bytes,1,opt,name=default_keystore_file_ciper,json=defaultKeystoreFileCiper,proto3" json:"default_keystore_file_ciper,omitempty"`
}

func (m *MiscConfig) Reset()                    { *m = MiscConfig{} }
func (m *MiscConfig) String() string            { return proto.CompactTextString(m) }
func (*MiscConfig) ProtoMessage()               {}
func (*MiscConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{8} }

func (m *MiscConfig) GetDefaultKeystoreFileCiper() string {
	if m != nil {
		return m.DefaultKeystoreFileCiper
	}
	return ""
}

type StatsConfig struct {
	// Enable metrics of not.
	EnableMetrics   bool                          `protobuf:"varint,1,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	ReportingModule []StatsConfig_ReportingModule `protobuf:"varint,2,rep,packed,name=reporting_module,json=reportingModule,enum=medletpb.StatsConfig_ReportingModule" json:"reporting_module,omitempty"`
	// Influxdb config.
	Influxdb    *InfluxdbConfig `protobuf:"bytes,11,opt,name=influxdb" json:"influxdb,omitempty"`
	MetricsTags []string        `protobuf:"bytes,12,rep,name=metrics_tags,json=metricsTags" json:"metrics_tags,omitempty"`
}

func (m *StatsConfig) Reset()                    { *m = StatsConfig{} }
func (m *StatsConfig) String() string            { return proto.CompactTextString(m) }
func (*StatsConfig) ProtoMessage()               {}
func (*StatsConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{9} }

func (m *StatsConfig) GetEnableMetrics() bool {
	if m != nil {
		return m.EnableMetrics
	}
	return false
}

func (m *StatsConfig) GetReportingModule() []StatsConfig_ReportingModule {
	if m != nil {
		return m.ReportingModule
	}
	return nil
}

func (m *StatsConfig) GetInfluxdb() *InfluxdbConfig {
	if m != nil {
		return m.Influxdb
	}
	return nil
}

func (m *StatsConfig) GetMetricsTags() []string {
	if m != nil {
		return m.MetricsTags
	}
	return nil
}

type InfluxdbConfig struct {
	// Host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name.
	Db string `protobuf:"bytes,3,opt,name=db,proto3" json:"db,omitempty"`
	// Auth user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Auth password.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *InfluxdbConfig) Reset()                    { *m = InfluxdbConfig{} }
func (m *InfluxdbConfig) String() string            { return proto.CompactTextString(m) }
func (*InfluxdbConfig) ProtoMessage()               {}
func (*InfluxdbConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{10} }

func (m *InfluxdbConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *InfluxdbConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *InfluxdbConfig) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *InfluxdbConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *InfluxdbConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SyncConfig struct {
	// Waiting time for response after send message to peer (seconds)
	ResponseTimeLimit uint32 `protobuf:"varint,1,opt,name=response_time_limit,json=responseTimeLimit,proto3" json:"response_time_limit,omitempty"`
	// If the request fails, retry this number of times
	NumberOfRetries uint32 `protobuf:"varint,2,opt,name=number_of_retries,json=numberOfRetries,proto3" json:"number_of_retries,omitempty"`
	// Maximum Number of concurrent download
	ActiveDownloadLimit uint32 `protobuf:"varint,3,opt,name=active_download_limit,json=activeDownloadLimit,proto3" json:"active_download_limit,omitempty"`
	// Height gap to activate download
	SyncActivationHeight uint64 `protobuf:"varint,20,opt,name=sync_activation_height,json=syncActivationHeight,proto3" json:"sync_activation_height,omitempty"`
	// Height gap to activate download
	SyncActivationLibGap uint64 `protobuf:"varint,21,opt,name=sync_activation_lib_gap,json=syncActivationLibGap,proto3" json:"sync_activation_lib_gap,omitempty"`
}

func (m *SyncConfig) Reset()                    { *m = SyncConfig{} }
func (m *SyncConfig) String() string            { return proto.CompactTextString(m) }
func (*SyncConfig) ProtoMessage()               {}
func (*SyncConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{11} }

func (m *SyncConfig) GetResponseTimeLimit() uint32 {
	if m != nil {
		return m.ResponseTimeLimit
	}
	return 0
}

func (m *SyncConfig) GetNumberOfRetries() uint32 {
	if m != nil {
		return m.NumberOfRetries
	}
	return 0
}

func (m *SyncConfig) GetActiveDownloadLimit() uint32 {
	if m != nil {
		return m.ActiveDownloadLimit
	}
	return 0
}

func (m *SyncConfig) GetSyncActivationHeight() uint64 {
	if m != nil {
		return m.SyncActivationHeight
	}
	return 0
}

func (m *SyncConfig) GetSyncActivationLibGap() uint64 {
	if m != nil {
		return m.SyncActivationLibGap
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "medletpb.Config")
	proto.RegisterType((*GlobalConfig)(nil), "medletpb.GlobalConfig")
	proto.RegisterType((*NetworkConfig)(nil), "medletpb.NetworkConfig")
	proto.RegisterType((*ChainConfig)(nil), "medletpb.ChainConfig")
	proto.RegisterType((*ProposerConfig)(nil), "medletpb.ProposerConfig")
	proto.RegisterType((*RPCConfig)(nil), "medletpb.RPCConfig")
	proto.RegisterType((*AppConfig)(nil), "medletpb.AppConfig")
	proto.RegisterType((*PprofConfig)(nil), "medletpb.PprofConfig")
	proto.RegisterType((*MiscConfig)(nil), "medletpb.MiscConfig")
	proto.RegisterType((*StatsConfig)(nil), "medletpb.StatsConfig")
	proto.RegisterType((*InfluxdbConfig)(nil), "medletpb.InfluxdbConfig")
	proto.RegisterType((*SyncConfig)(nil), "medletpb.SyncConfig")
	proto.RegisterEnum("medletpb.StatsConfig_ReportingModule", StatsConfig_ReportingModule_name, StatsConfig_ReportingModule_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 1349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x13, 0x7e, 0x25, 0x7f, 0x49, 0x23, 0x7f, 0x85, 0xfe, 0xda, 0x38, 0x6f, 0x12, 0x47, 0x85, 0x0b,
	0xa7, 0x41, 0xe5, 0xc6, 0x75, 0x73, 0xeb, 0xc1, 0x50, 0xd1, 0x24, 0x88, 0xdd, 0x1a, 0x9b, 0x00,
	0x39, 0x2e, 0xb8, 0xbb, 0xd4, 0x8a, 0xf0, 0xee, 0x92, 0x20, 0x29, 0xdb, 0x0a, 0x50, 0xa0, 0xd7,
	0xa2, 0xbf, 0xa0, 0xbd, 0xf4, 0xd0, 0x3f, 0xd3, 0x9f, 0xd2, 0x9f, 0x51, 0x70, 0xc8, 0x5d, 0xad,
	0xd4, 0xde, 0x96, 0xcf, 0xf3, 0xcc, 0x70, 0x38, 0x33, 0x1c, 0x2e, 0xac, 0x27, 0xa2, 0x1c, 0xf1,
	0x6c, 0x20, 0x95, 0x30, 0x82, 0x74, 0x0a, 0x96, 0xe6, 0xcc, 0xc8, 0xf8, 0xf0, 0x3c, 0xe3, 0x66,
	0x3c, 0x89, 0x07, 0x89, 0x28, 0x4e, 0x0b, 0x96, 0xf2, 0x38, 0x17, 0xc9, 0x69, 0x26, 0xbe, 0xac,
	0xbf, 0x4b, 0x66, 0x4e, 0x65, 0x7c, 0x5a, 0x30, 0xad, 0x69, 0xc6, 0x9c, 0x7d, 0xff, 0xef, 0x36,
	0xac, 0x0e, 0xd1, 0x21, 0x19, 0xc0, 0x6a, 0x96, 0x8b, 0x98, 0xe6, 0x41, 0xeb, 0xa8, 0x75, 0xd2,
	0x3b, 0xdb, 0x1f, 0x54, 0xbe, 0x07, 0xaf, 0x11, 0x77, 0xba, 0xd0, 0xab, 0xc8, 0x4b, 0x58, 0x2b,
	0x99, 0xb9, 0x13, 0xea, 0x26, 0x68, 0xa3, 0xc1, 0xc1, 0xcc, 0xe0, 0x07, 0x47, 0x78, 0x8b, 0x4a,
	0x47, 0x5e, 0xc0, 0x4a, 0x32, 0xa6, 0xbc, 0x0c, 0x96, 0xd0, 0x60, 0x6f, 0x66, 0x30, 0xb4, 0xb0,
	0x97, 0x3b, 0x0d, 0x39, 0x86, 0x25, 0x25, 0x93, 0x60, 0x19, 0xa5, 0x3b, 0x33, 0x69, 0x78, 0x3d,
	0xf4, 0x42, 0xcb, 0x5b, 0x9f, 0xda, 0x50, 0xa3, 0x83, 0x74, 0xd1, 0xe7, 0x7b, 0x0b, 0x57, 0x3e,
	0x51, 0x43, 0x4e, 0x60, 0xb9, 0xe0, 0x3a, 0x09, 0x18, 0x6a, 0x77, 0x67, 0xda, 0x2b, 0xae, 0x13,
	0x2f, 0x45, 0x85, 0xdd, 0x9d, 0x4a, 0x19, 0x8c, 0x16, 0x77, 0xbf, 0x90, 0xb2, 0xda, 0x9d, 0x4a,
	0x49, 0x9e, 0xc3, 0xb2, 0x9e, 0x96, 0x49, 0xf0, 0x57, 0x6b, 0xd1, 0xe3, 0xfb, 0x69, 0x59, 0x7b,
	0xb4, 0x92, 0xfe, 0x4f, 0xb0, 0xde, 0xcc, 0x23, 0x79, 0x08, 0x1d, 0x3c, 0x68, 0xc4, 0x53, 0xcc,
	0xf8, 0x46, 0xb8, 0x86, 0xeb, 0xb7, 0x29, 0x09, 0x60, 0x2d, 0xa5, 0x86, 0xa6, 0x5c, 0x05, 0xbd,
	0xa3, 0xd6, 0x49, 0x37, 0xac, 0x96, 0xe4, 0x31, 0x40, 0xa2, 0xa6, 0xd2, 0x88, 0x88, 0xe6, 0x59,
	0xb0, 0x8b, 0x66, 0x5d, 0x87, 0x5c, 0xe4, 0xe8, 0x73, 0x4c, 0xf5, 0x18, 0xc9, 0x3d, 0xe7, 0xd3,
	0xae, 0x2f, 0xf2, 0xac, 0xff, 0xc7, 0x32, 0x6c, 0xcc, 0x95, 0xc5, 0xee, 0x92, 0x73, 0x6d, 0x58,
	0xa9, 0x83, 0xd6, 0xd1, 0x92, 0xdd, 0xc5, 0x2f, 0xc9, 0x09, 0x6c, 0xfb, 0x92, 0x45, 0x37, 0x6c,
	0x1a, 0x8d, 0x78, 0xce, 0xb0, 0xc6, 0xdd, 0x70, 0xd3, 0xe3, 0xef, 0xd8, 0xf4, 0x7b, 0x9e, 0x33,
	0x72, 0x0c, 0x2b, 0x9a, 0xb1, 0x54, 0x07, 0xbd, 0xa3, 0xa5, 0x93, 0xde, 0xd9, 0xd6, 0xa0, 0xc4,
	0xc3, 0x5f, 0x33, 0xa6, 0xde, 0x96, 0x23, 0x11, 0x3a, 0x96, 0x3c, 0x87, 0xed, 0x58, 0x08, 0xa3,
	0x8d, 0xa2, 0x32, 0x92, 0x4c, 0x71, 0x91, 0x06, 0xeb, 0x18, 0xdf, 0x56, 0x8d, 0x5f, 0x23, 0x4c,
	0x4e, 0x61, 0xa7, 0xe0, 0x25, 0x2f, 0x26, 0x45, 0x94, 0x88, 0xb2, 0x64, 0x89, 0xe1, 0xa2, 0xd4,
	0xc1, 0x06, 0xaa, 0x89, 0xa7, 0x86, 0x33, 0x06, 0x53, 0x42, 0x93, 0x31, 0x73, 0x61, 0xee, 0x61,
	0x98, 0x5d, 0x44, 0x30, 0xc2, 0x67, 0xb0, 0xee, 0x68, 0xbf, 0xed, 0x3e, 0x3a, 0xea, 0x21, 0xe6,
	0xb7, 0x3c, 0x87, 0x03, 0xbb, 0x55, 0x54, 0x64, 0x2a, 0xca, 0xc5, 0x5d, 0x74, 0x47, 0x0d, 0x53,
	0x51, 0x41, 0xd5, 0x4d, 0xf0, 0x14, 0xd5, 0x3b, 0x96, 0xbe, 0xca, 0xd4, 0xa5, 0xb8, 0xfb, 0x68,
	0xb9, 0x2b, 0xaa, 0x6e, 0xc8, 0x2b, 0x08, 0x6a, 0xab, 0x31, 0xcf, 0xc6, 0x4d, 0xb3, 0x23, 0x34,
	0xdb, 0xf5, 0x66, 0x6f, 0x78, 0x36, 0x9e, 0xd9, 0xbd, 0x84, 0xbd, 0xda, 0x2e, 0x53, 0x34, 0xa9,
	0x23, 0x7b, 0xe6, 0x8e, 0xe8, 0x8d, 0x5e, 0x5b, 0xca, 0x07, 0xf8, 0x15, 0xec, 0x16, 0xf4, 0x3e,
	0x52, 0x8c, 0xa6, 0x36, 0x29, 0xc9, 0x44, 0x29, 0x56, 0x26, 0xd3, 0xa0, 0xef, 0x93, 0x42, 0xef,
	0x43, 0x46, 0xd3, 0xe1, 0x8c, 0x21, 0x67, 0xb0, 0x67, 0x2d, 0xee, 0x14, 0x37, 0x6c, 0xce, 0xe4,
	0x33, 0x77, 0xa0, 0x82, 0xde, 0x7f, 0xb4, 0x5c, 0xc3, 0xa6, 0xff, 0xeb, 0x12, 0xf4, 0x1a, 0xf7,
	0xd0, 0xf6, 0x47, 0xc6, 0x4a, 0xa6, 0xb9, 0xf6, 0xc5, 0xaf, 0x96, 0x64, 0x1f, 0x56, 0x6f, 0xd8,
	0xd4, 0xb6, 0xe7, 0x3a, 0x12, 0x7e, 0x65, 0x4b, 0xa1, 0x0d, 0x55, 0x26, 0x2a, 0x78, 0xc9, 0xb0,
	0x3b, 0x3b, 0x61, 0x17, 0x91, 0x2b, 0x5e, 0x32, 0xf2, 0x02, 0x1e, 0x68, 0x9e, 0x95, 0xd4, 0x4c,
	0x14, 0x8b, 0x12, 0x2e, 0xc7, 0x4c, 0xe9, 0x20, 0xc0, 0xd6, 0xdb, 0xae, 0x89, 0xa1, 0xc3, 0x6d,
	0x0f, 0xda, 0xb1, 0x75, 0x13, 0xb9, 0xea, 0x69, 0xfe, 0x89, 0x05, 0x0f, 0x31, 0xf8, 0x4d, 0xc4,
	0x87, 0x16, 0x7e, 0xcf, 0x3f, 0x31, 0xf2, 0x39, 0x6c, 0x19, 0xca, 0xf3, 0xa6, 0xf0, 0x10, 0x85,
	0x1b, 0x16, 0x9e, 0xd3, 0x39, 0x8f, 0x52, 0x88, 0xdc, 0xe9, 0x1e, 0x39, 0x1d, 0xc2, 0xd7, 0x42,
	0xe4, 0xa8, 0x3b, 0x83, 0x3d, 0xa3, 0x68, 0xa9, 0x29, 0x36, 0x58, 0x43, 0xfd, 0x7f, 0x97, 0xbb,
	0x06, 0x59, 0xdb, 0x04, 0xb0, 0x26, 0x15, 0xbf, 0xbd, 0x61, 0xd3, 0xe0, 0xb1, 0xcb, 0x95, 0x5f,
	0x92, 0x57, 0xd0, 0x95, 0x4a, 0x48, 0xa1, 0xed, 0x61, 0x9f, 0xe0, 0x2d, 0x09, 0x66, 0x53, 0xe2,
	0xda, 0x53, 0x7e, 0x52, 0xcc, 0xa4, 0xfd, 0xdf, 0x5b, 0xb0, 0x39, 0xcf, 0x92, 0x43, 0xe8, 0x54,
	0x3c, 0x4e, 0x8c, 0x6e, 0x58, 0xaf, 0x9b, 0x01, 0xb4, 0xe7, 0x03, 0x38, 0x84, 0x4e, 0x22, 0x78,
	0x19, 0x53, 0xcd, 0x70, 0xee, 0x76, 0xc3, 0x7a, 0xdd, 0x28, 0x64, 0x6f, 0xae, 0x90, 0x4f, 0x00,
	0x24, 0xd5, 0x5a, 0x8e, 0x95, 0xb5, 0x72, 0x45, 0x6e, 0x20, 0xfd, 0xdf, 0x5a, 0xd0, 0xad, 0xe7,
	0xb0, 0x2d, 0xbb, 0x92, 0x49, 0xe4, 0xa6, 0x87, 0x9f, 0x25, 0x5d, 0x25, 0x93, 0x4b, 0x04, 0xc8,
	0x53, 0xe8, 0x8d, 0x8d, 0x91, 0x15, 0xdf, 0x46, 0x1e, 0x2c, 0xb4, 0x20, 0x28, 0x44, 0x3a, 0xc9,
	0x6d, 0x90, 0xb5, 0xe0, 0x0a, 0x11, 0xdb, 0x38, 0xb3, 0x59, 0x10, 0xe5, 0xbc, 0xe0, 0x46, 0xe3,
	0xc3, 0xb0, 0x12, 0x6e, 0xcf, 0x88, 0x4b, 0xc4, 0xfb, 0x7f, 0xb6, 0xa0, 0x5b, 0x4f, 0x69, 0xf2,
	0x08, 0xba, 0xb9, 0xc8, 0xa2, 0x9c, 0xdd, 0xb2, 0xbc, 0x4a, 0x5a, 0x2e, 0xb2, 0x4b, 0xbb, 0xb6,
	0xe3, 0xd2, 0x92, 0x8d, 0xf9, 0xb6, 0x96, 0x8b, 0x0c, 0xc7, 0xc6, 0x01, 0xd8, 0xcf, 0x88, 0x66,
	0x2e, 0x69, 0x1b, 0xe1, 0x6a, 0x2e, 0xb2, 0x8b, 0xcc, 0xc6, 0xb2, 0x22, 0xa5, 0x12, 0x23, 0xff,
	0x30, 0x35, 0xde, 0x9b, 0x6b, 0x0b, 0x57, 0xef, 0x0d, 0x6a, 0x6c, 0x55, 0x6e, 0x99, 0xd2, 0x5c,
	0x94, 0xf8, 0x3c, 0x75, 0xc3, 0x6a, 0xd9, 0x2f, 0xa1, 0xd7, 0xd0, 0x2f, 0xe6, 0xc8, 0x05, 0xda,
	0xcc, 0xd1, 0x13, 0x80, 0x44, 0x4e, 0xac, 0xc5, 0x2c, 0xd8, 0x06, 0x62, 0xf9, 0x82, 0x15, 0x15,
	0xef, 0xea, 0xdc, 0x40, 0xfa, 0xef, 0x00, 0x66, 0x6f, 0x1c, 0xf9, 0x16, 0x1e, 0xa5, 0x6c, 0x44,
	0x27, 0xb9, 0xb1, 0x03, 0x5e, 0x1b, 0xa1, 0xdc, 0xf8, 0xb4, 0xb7, 0xb2, 0x6e, 0xae, 0xc0, 0x4b,
	0xde, 0x79, 0x85, 0xcd, 0xcb, 0xd0, 0xf2, 0xfd, 0x9f, 0xdb, 0xd0, 0x6b, 0xbc, 0xae, 0xe4, 0x18,
	0x36, 0x59, 0x49, 0xe3, 0x9c, 0x45, 0x05, 0x33, 0x8a, 0x27, 0x1a, 0x3d, 0x74, 0xc2, 0x0d, 0x87,
	0x5e, 0x39, 0x90, 0x5c, 0xc3, 0xb6, 0x62, 0x52, 0x28, 0xc3, 0xcb, 0xac, 0x2a, 0xb6, 0xed, 0x86,
	0xcd, 0xb3, 0xe3, 0xff, 0x7c, 0xb5, 0x07, 0x61, 0xa5, 0x76, 0x7d, 0x10, 0x6e, 0xa9, 0x79, 0x80,
	0x9c, 0x43, 0x87, 0x97, 0xa3, 0x7c, 0x72, 0x9f, 0xc6, 0xd8, 0xc1, 0x73, 0x77, 0xeb, 0xad, 0x67,
	0x7c, 0x49, 0x6a, 0xa5, 0x7d, 0x12, 0x7c, 0x9c, 0x91, 0xa1, 0x99, 0x0e, 0xd6, 0xb1, 0xe1, 0x7a,
	0x1e, 0xfb, 0x40, 0x33, 0xdd, 0x7f, 0x0a, 0x5b, 0x0b, 0x9b, 0x93, 0x75, 0xe8, 0x54, 0x1e, 0xb7,
	0xff, 0xd7, 0xbf, 0x87, 0xcd, 0x79, 0xff, 0x84, 0xc0, 0xf2, 0x58, 0x68, 0xe3, 0x93, 0x87, 0xdf,
	0x16, 0xb3, 0x4e, 0xb0, 0x5e, 0x1b, 0x21, 0x7e, 0x93, 0x4d, 0x68, 0xa7, 0xb1, 0xaf, 0x50, 0x3b,
	0x8d, 0xad, 0x66, 0x62, 0x6f, 0xf4, 0xb2, 0xb3, 0xb3, 0xdf, 0x78, 0xd3, 0xa9, 0xd6, 0x77, 0x42,
	0xa5, 0xc1, 0x8a, 0xbf, 0xe9, 0x7e, 0xdd, 0xff, 0xa5, 0x0d, 0x30, 0xfb, 0xb9, 0x20, 0x03, 0xd8,
	0x51, 0x4c, 0x4b, 0x51, 0x6a, 0x16, 0x19, 0x5e, 0x30, 0x77, 0x3d, 0xfc, 0x1f, 0xc5, 0x83, 0x8a,
	0xfa, 0xc0, 0x0b, 0x86, 0xf7, 0x83, 0x7c, 0x01, 0x0f, 0xca, 0x49, 0x11, 0x33, 0x15, 0x89, 0x51,
	0xa4, 0xec, 0x91, 0x99, 0xf6, 0xf1, 0x6d, 0x39, 0xe2, 0xc7, 0x51, 0xe8, 0x60, 0x3b, 0x09, 0xed,
	0x9c, 0xbb, 0x65, 0x51, 0x2a, 0xee, 0xca, 0x5c, 0xd0, 0xd4, 0x7b, 0x77, 0x57, 0x62, 0xc7, 0x91,
	0xdf, 0x79, 0xce, 0xf9, 0x3f, 0x87, 0x7d, 0xfb, 0xbb, 0x13, 0x21, 0x47, 0xf1, 0xc2, 0x8e, 0x19,
	0xcf, 0xc6, 0x06, 0xdf, 0x83, 0xe5, 0x70, 0xd7, 0xb2, 0x17, 0x35, 0xf9, 0x06, 0x39, 0xf2, 0x0d,
	0x1c, 0x2c, 0x5a, 0xe5, 0x3c, 0x8e, 0x32, 0x2a, 0xf1, 0x45, 0xff, 0x97, 0xd9, 0x25, 0x8f, 0x5f,
	0x53, 0x19, 0xaf, 0xe2, 0x5f, 0xec, 0xd7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x61, 0x3f,
	0xf1, 0x15, 0x0b, 0x00, 0x00,
}
