// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccountStateRequest
	GetAccountStateResponse
	NonParamsRequest
	GetMedStateResponse
	TransactionRequest
	TransactionResponse
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// block account state with height. If not specified, use 0 as tail height.
	Height uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance string `protobuf:"bytes,1,opt,name=balance" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	// Account type
	Type uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetAccountStateResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetAccountStateResponse) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type NonParamsRequest struct {
}

func (m *NonParamsRequest) Reset()                    { *m = NonParamsRequest{} }
func (m *NonParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamsRequest) ProtoMessage()               {}
func (*NonParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetMedStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	// Current tail block hash
	Tail string `protobuf:"bytes,2,opt,name=tail" json:"tail,omitempty"`
	// Current tail block height
	Height uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	// The current med protocol version.
	ProtocolVersion string `protobuf:"bytes,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	// Med version
	Version string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
}

func (m *GetMedStateResponse) Reset()                    { *m = GetMedStateResponse{} }
func (m *GetMedStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMedStateResponse) ProtoMessage()               {}
func (*GetMedStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetMedStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetMedStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetMedStateResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetMedStateResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *GetMedStateResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type TransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce" json:"nonce,omitempty"`
	// Transaction hash
	Hash []byte `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transaction sign
	Sign []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TransactionRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TransactionResponse struct {
	// Hex string of transaction hash.
	Txhash string `protobuf:"bytes,1,opt,name=txhash" json:"txhash,omitempty"`
}

func (m *TransactionResponse) Reset()                    { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()               {}
func (*TransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionResponse) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*NonParamsRequest)(nil), "rpcpb.NonParamsRequest")
	proto.RegisterType((*GetMedStateResponse)(nil), "rpcpb.GetMedStateResponse")
	proto.RegisterType((*TransactionRequest)(nil), "rpcpb.TransactionRequest")
	proto.RegisterType((*TransactionResponse)(nil), "rpcpb.TransactionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	GetMedState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMedState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error) {
	out := new(GetMedStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetMedState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	GetMedState(context.Context, *NonParamsRequest) (*GetMedStateResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMedState(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountState",
			Handler:    _ApiService_GetAccountState_Handler,
		},
		{
			MethodName: "GetMedState",
			Handler:    _ApiService_GetMedState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for AdminService service

type AdminServiceClient interface {
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceServer interface {
	SendTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _AdminService_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xd3, 0x7c, 0x34, 0x43, 0x4b, 0xca, 0x06, 0x12, 0x27, 0xa2, 0xc8, 0xda, 0x53, 0x40,
	0x22, 0x16, 0xe5, 0xc6, 0x2d, 0xa7, 0x0a, 0x24, 0x10, 0x72, 0x10, 0xb7, 0xaa, 0xda, 0xd8, 0x4b,
	0xbc, 0xc8, 0xd9, 0x35, 0xbb, 0x9b, 0x08, 0x38, 0x72, 0xe6, 0xc6, 0x2f, 0xe0, 0x37, 0x71, 0xe5,
	0xc8, 0x0f, 0x41, 0x9e, 0x5d, 0x37, 0x69, 0xda, 0xde, 0xe6, 0x8d, 0xc7, 0xef, 0xcd, 0x7b, 0x3b,
	0xd0, 0xd5, 0x65, 0x3a, 0x2d, 0xb5, 0xb2, 0x8a, 0xb4, 0x74, 0x99, 0x96, 0x8b, 0xf1, 0xe3, 0xa5,
	0x52, 0xcb, 0x82, 0xc7, 0xac, 0x14, 0x31, 0x93, 0x52, 0x59, 0x66, 0x85, 0x92, 0xc6, 0x0d, 0xd1,
	0x37, 0x30, 0x38, 0xe7, 0x76, 0x96, 0xa6, 0x6a, 0x2d, 0xed, 0xdc, 0x32, 0xcb, 0x13, 0xfe, 0x65,
	0xcd, 0x8d, 0x25, 0x21, 0x74, 0x58, 0x96, 0x69, 0x6e, 0x4c, 0x18, 0x44, 0xc1, 0xa4, 0x9b, 0xd4,
	0x90, 0x0c, 0xa0, 0x9d, 0x73, 0xb1, 0xcc, 0x6d, 0xd8, 0x88, 0x82, 0x49, 0x33, 0xf1, 0x88, 0x5e,
	0xc0, 0xf0, 0x06, 0x97, 0x29, 0x95, 0x34, 0xbc, 0x22, 0x5b, 0xb0, 0x82, 0xc9, 0x94, 0xd7, 0x64,
	0x1e, 0x92, 0x87, 0xd0, 0x92, 0xaa, 0xea, 0x3b, 0x2e, 0x07, 0x08, 0x81, 0xa6, 0xfd, 0x56, 0xf2,
	0xf0, 0x20, 0x0a, 0x26, 0xc7, 0x09, 0xd6, 0x94, 0xc0, 0xc9, 0x3b, 0x25, 0xdf, 0x33, 0xcd, 0x56,
	0xc6, 0x2f, 0x49, 0x7f, 0x07, 0xd0, 0x3f, 0xe7, 0xf6, 0x2d, 0xcf, 0xae, 0xeb, 0x8d, 0xe0, 0x30,
	0xcd, 0x99, 0x90, 0x97, 0x22, 0x43, 0xc1, 0xe3, 0xa4, 0x83, 0xf8, 0x75, 0x86, 0xd4, 0x4c, 0x14,
	0xa8, 0xd7, 0x4d, 0xb0, 0xde, 0x71, 0x74, 0xb0, 0xeb, 0x88, 0x3c, 0x85, 0x13, 0x8c, 0x29, 0x55,
	0xc5, 0xe5, 0x86, 0x6b, 0x23, 0x94, 0x0c, 0x3b, 0xf8, 0x5f, 0xaf, 0xee, 0x7f, 0x74, 0xed, 0xca,
	0x61, 0x3d, 0x71, 0xe8, 0x1c, 0x7a, 0x48, 0x7f, 0x06, 0x40, 0x3e, 0x68, 0x26, 0x0d, 0x4b, 0xab,
	0xe4, 0xeb, 0x7c, 0x09, 0x34, 0x3f, 0x69, 0xb5, 0xf2, 0x79, 0x60, 0x4d, 0xee, 0x43, 0xc3, 0x2a,
	0xbf, 0x59, 0xc3, 0xaa, 0x2a, 0x9c, 0x0d, 0x2b, 0xd6, 0x2e, 0x87, 0x6e, 0xe2, 0xc0, 0x36, 0xb2,
	0xe6, 0x5e, 0x64, 0x39, 0x33, 0x79, 0xd8, 0x8a, 0x82, 0xc9, 0x51, 0x82, 0x75, 0xd5, 0x33, 0x62,
	0x29, 0xc3, 0xb6, 0xeb, 0x55, 0x35, 0x7d, 0x0e, 0xfd, 0x6b, 0xdb, 0xf8, 0xc4, 0x06, 0xd0, 0xb6,
	0x5f, 0x91, 0xc0, 0x2d, 0xe4, 0xd1, 0xd9, 0xdf, 0x00, 0x60, 0x56, 0x8a, 0x39, 0xd7, 0x1b, 0x91,
	0x72, 0xa2, 0xa0, 0xb7, 0xf7, 0xc6, 0xe4, 0x74, 0x8a, 0x87, 0x36, 0xbd, 0xfd, 0x8e, 0xc6, 0x4f,
	0xee, 0xfa, 0xec, 0x84, 0xe9, 0xe9, 0x8f, 0x3f, 0xff, 0x7e, 0x35, 0x86, 0xe4, 0x51, 0xbc, 0x79,
	0x11, 0xaf, 0x0d, 0xd7, 0x31, 0x73, 0x63, 0x06, 0xd9, 0x2f, 0xe0, 0xde, 0xce, 0x03, 0x93, 0xa1,
	0x67, 0xdb, 0xbf, 0x84, 0xf1, 0x78, 0x2b, 0xb3, 0x7f, 0x0d, 0x74, 0x84, 0x12, 0x7d, 0xf2, 0xe0,
	0x4a, 0x62, 0xc5, 0x33, 0xa4, 0x3f, 0xfb, 0x0e, 0x47, 0xb3, 0x6c, 0x25, 0x64, 0xed, 0xef, 0x33,
	0xf4, 0xe6, 0x5c, 0x66, 0x3b, 0x09, 0x91, 0x91, 0x67, 0xbe, 0xf9, 0x86, 0x57, 0xa2, 0xb7, 0x04,
	0x4a, 0x23, 0x14, 0x1d, 0x53, 0xf4, 0xc5, 0x2a, 0x8d, 0xd8, 0x6e, 0xc7, 0x5e, 0x05, 0xcf, 0x16,
	0x6d, 0xbc, 0xa1, 0x97, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x06, 0xf5, 0x37, 0xb4, 0x03,
	0x00, 0x00,
}
