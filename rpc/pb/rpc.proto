syntax = "proto3";

package rpcpb;

import "google/api/annotations.proto";

service ApiService {
  rpc GetAccountAPI (GetAccount) returns (Account) {
    option (google.api.http) = {
			get: "/v1/account"
		};
  }

  rpc GetBlockAPI (GetBlock) returns (Block) {
    option (google.api.http) = {
			get: "/v1/block"
		};
  }

  rpc GetBlocksAPI (GetBlocks) returns (Blocks) {
    option (google.api.http) = {
			get: "/v1/blocks"
		};
  }

  rpc GetCandidatesAPI (NonParamRequest) returns (Candidates) {
    option (google.api.http) = {
			get: "/v1/candidates"
		};
  }

  rpc GetDynastyAPI (NonParamRequest) returns (Dynasty) {
    option (google.api.http) = {
			get: "/v1/dynasty"
		};
  }

  rpc GetMedStateAPI (NonParamRequest) returns (MedState) {
    option (google.api.http) = {
			get: "/v1/node/medstate"
		};
  }

  rpc GetPendingTransactionsAPI (NonParamRequest) returns (Transactions) {
    option (google.api.http) = {
			get: "/v1/transactions/pending"
		};
  }

  rpc GetTransactionAPI (GetTransaction) returns (Transaction) {
    option (google.api.http) = {
			get: "/v1/transaction"
		};
  }

  rpc GetTransactionReceiptAPI (GetTransaction) returns (TransactionReceipt) {
    option (google.api.http) = {
      get: "/v1/transaction/receipt"
    };
  }

  rpc SendTransactionAPI (SendTransaction) returns (TransactionHash) {
    option (google.api.http) = {
			post: "/v1/transaction"
			body: "*"
		};
  }

  rpc SubscribeAPI (SubscribeRequest) returns (stream SubscribeResponse) {
    option (google.api.http) = {
			get: "/v1/subscribe"
		};
  }

  rpc HealthCheckAPI (NonParamRequest) returns (Health) {
    option (google.api.http) = {
			get: "/v1/healthcheck"
		};
  }
}

message GetAccount {
  // Send only one between address and alias
  // Hex string of the account addresss.
  string address = 1;
  // String of the account alias.
  string alias = 2;

  // Send only one between type and height
  // Block type "genesis", "confirmed", or "tail".
  string type = 10;
  // Block account state with height
  uint64 height = 11;
}

message Account {
  // Hex string of the account address.
  string address = 1;
  // Current balance in unit of 1/(10^8) MED.
  string balance = 2; // uint128, len=16
  // Current transaction count.
  uint64 nonce = 3;
  // Current vesting in unit of 1/(10^8) MED.
  string vesting = 4;

  // Voted address.
  repeated string voted = 5;

  string bandwidth = 6;

  string unstaking = 7;

  string alias = 8;
  string candidate_id = 9;
}

message Data {
  string Alias = 1;
}

message GetBlock {
  // Send only one among hash, type and height
  // Block hash
  string hash = 1;
  // Block type "genesis", "confirmed", or "tail".
  string type = 2;
  // Block height
  uint64 height = 3;
}

message Block {
  // Block height
  uint64 height = 1;
  // Block hash
  string hash = 2;
  // Block parent hash
  string parent_hash = 3;
  // Block coinbase address
  string coinbase = 4;
  // Block reward
  string reward = 5;
  // Block supply
  string supply = 6;
  // Block timestamp
  int64 timestamp = 7;
  // Block chain id
  uint32 chain_id = 8;
  // Block hash algorithm
  uint32 hash_alg = 9;
  // Block signature algorithm
  uint32 crypto_alg = 10;
  // Block signature
  string sign = 11;

  // Root hash of accounts trie
  string accs_root = 20;
  // Root hash of txs trie
  string txs_root = 21;
  // Root hash of dpos state trie
  string dpos_root = 22;

  // Transactions in block
  repeated Transaction transactions = 30;
  repeated string tx_hashes = 31;
}

message GetBlocks {
  uint64 from = 1;
  uint64 to = 2;
}

message Blocks {
  repeated Block blocks = 1;
}

message NonParamRequest {
}

message Candidate {
  string candidate_id = 1;
  string address = 2;
  string url = 3;
  string collateral = 4;
  string votePower = 5;
}

message Candidates {
  repeated Candidate candidates = 1;
}

message Dynasty {
  repeated string addresses = 1;
}

message MedState {
  // Block chain id
  uint32 chain_id = 1;
  // Current tail block hash
  string tail = 2;
  // Current tail block height
  uint64 height = 3;
  // Current LIB hash
  string LIB = 4;
}

message Transactions {
  repeated Transaction transactions = 1;
}

message GetTransaction {
  // Transaction hash
  string hash = 1;
}

message Transaction {
  // Transaction hash
  string hash = 1;
  // Hex string of the sender account addresss.
  string from = 2;
  // Hex string of the receiver account addresss.
  string to = 3;
  // Amount of value sending with this transaction.
  string value = 4; // uint128, len=16
  // Transaction timestamp.
  int64 timestamp = 5;
  // Transaction type.
  string tx_type = 6;
  // Transaction nonce.
  uint64 nonce = 7;
  // Transaction chain ID.
  uint32 chain_id = 8;
  // Transaction algorithm.

  // Transaction payload.
  string payload = 20;

  // Transaction hash algorithm
  uint32 hash_alg = 29;
  // Transaction crypto algorithm
  uint32 crypto_alg = 30;
  // Transaction sign.
  string sign = 31;
  // Transaction payer's sign.
  string payer_sign = 32;
  // If transaction is executed and included in the block, it returns true. otherwise, false.
  bool executed = 33;
}

message TransactionReceipt {
  bool executed = 1;
  string cpuUsage = 2;
  string netUsate = 3;
  string error = 4;
}

message SendTransaction {
  // Transaction hash
  string hash = 1;
  // Hex string of the sender account addresss.
  string to = 2;
  // Amount of value sending with this transaction.
  string value = 3; // uint128, len=16
  // Transaction timestamp.
  int64 timestamp = 4;
  // Transaction type.
  string tx_type = 5;
  // Transaction nonce.
  uint64 nonce = 6;
  // Transaction chain ID.
  uint32 chain_id = 7;

  // Transaction payload
  string payload = 20;

  // Transaction hash algorithm
  uint32 hash_alg = 29;
  // Transaction crypto algorithm.
  uint32 crypto_alg = 30;
  // Transaction sign.
  string sign = 31;
  // Transaction payer's sign.
  string payer_sign = 32;
}

message TransactionHash {
  // Hex string of transaction hash.
  string hash = 1;
}

message SubscribeRequest {
  repeated string topics = 1;
}

message SubscribeResponse {
  string topic = 1;
  string hash = 2;
  string type = 3;
}

message Health {
  bool ok = 1;
}
