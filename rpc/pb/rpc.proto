syntax = "proto3";

package rpcpb;

import "google/api/annotations.proto";

service ApiService {
	rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse) {
		option (google.api.http) = {
			get: "/v1/user/accountstate"
		};
	}

	rpc GetAccounts (NonParamsRequest) returns (AccountsResponse) {
		option (google.api.http) = {
			get: "/v1/user/accounts"
		};
	}

    rpc GetBlock (GetBlockRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/v1/block"
        };
    }

    rpc GetBlocks (GetBlocksRequest) returns (BlocksResponse) {
    	option (google.api.http) = {
    		get: "/v1/blocks"
    	};
    }

	rpc GetCurrentAccountTransactions (GetCurrentAccountTransactionsRequest) returns (TransactionsResponse) {
		option (google.api.http) = {
			get: "/v1/user/{address}/transactions"
		};
	}

	rpc GetMedState (NonParamsRequest) returns (GetMedStateResponse) {
		option (google.api.http) = {
			get: "/v1/node/medstate"
		};
	}

	rpc GetTransaction (GetTransactionRequest) returns (TransactionResponse) {
		option (google.api.http) = {
			get: "/v1/transaction"
		};
	}

	rpc GetPendingTransactions (NonParamsRequest) returns (TransactionsResponse) {
		option (google.api.http) = {
			get: "/v1/transactions/pending"
		};
	}

	rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
          post: "/v1/transaction"
          body: "*"
      };
	}

	rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {
		option (google.api.http) = {
			post: "/v1/subscribe"
			body: "*"
		};
	}
}

message GetAccountStateRequest {
	// Hex string of the account addresss.
	string address = 1;
	// block account state with height. Or the string "genesis", "confirmed", "tail".
	string height = 2;
}

message GetAccountStateResponse {
	// Hex string of the account address.
	string address = 1;
	// Current balance in unit of 1/(10^8) MED.
	string balance = 2; // uint128, len=16
	// Account addresses certificated by the account.
	repeated string certs_issued = 3;
	// Account addresses that have certificated the account.
	repeated string certs_received = 4;
	// Current transaction count.
	uint64 nonce = 5;
	// List of record hash.
	repeated string records = 6;
	// Current vesting in unit of 1/(10^8) MED.
	string vesting = 7;
	// Voted address.
	string voted = 8;
	// Transactions sent from account
	repeated string txs_send = 9;
	// Transactions sent to account
	repeated string txs_get = 10;
}

message GetBlockRequest {
    // Block hash. Or the string "genesis", "confirmed", "tail".
    string hash = 1;
}

message BlockResponse {
	// Block hash
	string hash = 1;
	// Block parent hash
	string parent_hash = 2;
	// Block coinbase address
	string coinbase = 3;
	// Block timestamp
	int64 timestamp = 4;
	// Block chain id
	uint32 chain_id = 5;
	// Block signature algorithm
	uint32 alg = 6;
	// Block signature
	string sign = 7;
	// Root hash of accounts trie
	string accs_root = 8;
	// Root hash of transactions trie
	string txs_root = 9;
	// Root hash of usage trie
	string usage_root = 10;
	// Root hash of records trie
	string records_root = 11;
	// Root hash of consensus trie
	string consensus_root = 12;
	// Transactions in block
	repeated TransactionResponse transactions = 13;
	// Block height
	uint64 height = 14;
}

message NonParamsRequest {
}

message GetMedStateResponse {
	// Block chain id
	uint32 chain_id = 1;

	// Current tail block hash
	string tail = 2;

	// Current tail block height
	uint64 height = 3;

	// Current LIB hash
	string LIB = 4;
}

message GetTransactionRequest {
	// Transaction hash
	string hash = 1;
}

message GetCurrentAccountTransactionsRequest {
	// Hex string of the account addresss.
	string address = 1;
	// Whether or not to include pending transactions. Default is true.
	string include_pending = 2;
}

message SendTransactionRequest {
	// Transaction hash
	string hash = 1;
	// Hex string of the sender account addresss.
	string from = 2;
	// Hex string of the receiver account addresss.
	string to = 3;
	// Amount of value sending with this transaction.
	string value = 4; // uint128, len=16
	// Transaction timestamp.
	int64 timestamp = 5;
	// Transaction Data type.
	TransactionData data = 6;
	// Transaction nonce.
	uint64 nonce = 7;
	// Transaction chain ID.
	uint32 chain_id = 8;
	// Transaction algorithm.
	uint32 alg = 9;
	// Transaction sign.
	string sign = 10;
	// Transaction payer's sign.
	string payer_sign = 11;
}

message SendTransactionResponse {
	// Hex string of transaction hash.
	string hash = 1;
}

message TransactionData {
	// Transaction data type.
	string type = 1;
	// Transaction data payload.
	string payload = 2;
}

message TransactionResponse {
	// Transaction hash
	string hash = 1;
	// Hex string of the sender account addresss.
	string from = 2;
	// Hex string of the receiver account addresss.
	string to = 3;
	// Amount of value sending with this transaction.
	string value = 4; // uint128, len=16
	// Transaction timestamp.
	int64 timestamp = 5;
	// Transaction Data type.
	TransactionData data = 6;
	// Transaction nonce.
	uint64 nonce = 7;
	// Transaction chain ID.
	uint32 chain_id = 8;
	// Transaction algorithm.
	uint32 alg = 9;
	// Transaction sign.
	string sign = 10;
	// Transaction payer's sign.
	string payer_sign = 11;
	// If transaction is executed and included in the block, it returns true. otherwise, false.
	bool executed = 12;
}

message SubscribeRequest {
	repeated string topics = 1;
}

message SubscribeResponse {
	string topic = 1;
	string data = 2;
}

message GetBlocksRequest {
	uint64 from = 1;
	uint64 to = 2;
}

message BlocksResponse {
	repeated BlockResponse blocks = 1;
}

message TransactionsResponse {
	repeated TransactionResponse transactions = 1;
}

message AccountsResponse {
	repeated GetAccountStateResponse accounts = 1;
}
