syntax = "proto3";

package rpcpb;

import "google/api/annotations.proto";

service ApiService {
  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
			get: "/v1/account"
		};
  }

  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {
    option (google.api.http) = {
			get: "/v1/block"
		};
  }

  rpc GetBlocks (GetBlocksRequest) returns (GetBlocksResponse) {
    option (google.api.http) = {
			get: "/v1/blocks"
		};
  }

  rpc GetCandidates (NonParamRequest) returns (GetCandidatesResponse) {
    option (google.api.http) = {
			get: "/v1/candidates"
		};
  }

  rpc GetDynasty (NonParamRequest) returns (GetDynastyResponse) {
    option (google.api.http) = {
			get: "/v1/dynasty"
		};
  }

  rpc GetMedState (NonParamRequest) returns (GetMedStateResponse) {
    option (google.api.http) = {
			get: "/v1/node/medstate"
		};
  }

  rpc GetPendingTransactions (NonParamRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
			get: "/v1/transactions/pending"
		};
  }

  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
			get: "/v1/transaction"
		};
  }

  rpc GetAccountTransactions (GetAccountTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
			get: "/v1/account/{address}/transactions"
		};
  }

  rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
    option (google.api.http) = {
			post: "/v1/transaction"
			body: "*"
		};
  }

  rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {
    option (google.api.http) = {
			post: "/v1/subscribe"
			body: "*"
		};
  }
}

message GetAccountRequest {
  // Hex string of the account addresss.
  string address = 1;
  // If you send type, height field is ignored.
  // Block type "genesis", "confirmed", or "tail".
  string type = 2;
  // Block account state with height
  uint64 height = 3;
}

message GetAccountResponse {
  // Hex string of the account address.
  string address = 1;
  // Current balance in unit of 1/(10^8) MED.
  string balance = 2; // uint128, len=16
  // Current transaction count.
  uint64 nonce = 3;
  // Current vesting in unit of 1/(10^8) MED.
  string vesting = 4;

  // Voted address.
  repeated string voted = 5;

  string bandwidth = 6;

  string unstaking = 7;
  //	// List of record hash.
  //	repeated string records = 6;
  //	// Account addresses that have certificated the account.
  //	repeated string certs_received = 7;
  //	// Account addresses certificated by the account.
  //	repeated string certs_issued = 8;
  // Transactions sent from account
  repeated string txs_from = 9;
  // Transactions sent to account
  repeated string txs_to = 10;
}

message GetBlockRequest {
  // If you send hash, type and height field is ignored.
  // Block hash
  string hash = 1;
  // Block type "genesis", "confirmed", or "tail".
  string type = 2;
  // Block height
  uint64 height = 3;
}

message GetBlockResponse {
  // Block height
  uint64 height = 1;
  // Block hash
  string hash = 2;
  // Block parent hash
  string parent_hash = 3;
  // Block coinbase address
  string coinbase = 4;
  // Block reward
  string reward = 5;
  // Block supply
  string supply = 6;
  // Block timestamp
  int64 timestamp = 7;
  // Block chain id
  uint32 chain_id = 8;
  // Block signature algorithm
  uint32 alg = 9;
  // Block signature
  string sign = 10;

  // Root hash of accounts trie
  string accs_root = 20;
  // Root hash of txs trie
  string txs_root = 21;
  // Root hash of dpos state trie
  string dpos_root = 22;

  // Transactions in block
  repeated GetTransactionResponse transactions = 30;
}

message GetBlocksRequest {
  uint64 from = 1;
  uint64 to = 2;
}

message GetBlocksResponse {
  repeated GetBlockResponse blocks = 1;
}

message NonParamRequest {
}

message Candidate {
  string address = 1;
  string collatral = 2;
  string votePower = 3;
}

message GetCandidatesResponse {
  repeated Candidate candidates = 1;
}

message GetDynastyResponse {
  repeated string addresses = 1;
}

message GetMedStateResponse {
  // Block chain id
  uint32 chain_id = 1;
  // Current tail block hash
  string tail = 2;
  // Current tail block height
  uint64 height = 3;
  // Current LIB hash
  string LIB = 4;
}

message GetTransactionsResponse {
  repeated GetTransactionResponse transactions = 1;
}

message GetTransactionRequest {
  // Transaction hash
  string hash = 1;
}

message GetTransactionResponse {
  // Transaction hash
  string hash = 1;
  // Hex string of the sender account addresss.
  string from = 2;
  // Hex string of the receiver account addresss.
  string to = 3;
  // Amount of value sending with this transaction.
  string value = 4; // uint128, len=16
  // Transaction timestamp.
  int64 timestamp = 5;
  // Transaction type.
  string tx_type = 6;
  // Transaction nonce.
  uint64 nonce = 7;
  // Transaction chain ID.
  uint32 chain_id = 8;
  // Transaction algorithm.

  // Transaction payload.
  string payload = 20;

  // Transaction algorithm
  uint32 alg = 30;
  // Transaction sign.
  string sign = 31;
  // Transaction payer's sign.
  string payer_sign = 32;
  // If transaction is executed and included in the block, it returns true. otherwise, false.
  bool executed = 33;
}

message GetAccountTransactionsRequest {
  // Hex string of the account addresss.
  string address = 1;
  // Whether or not to include pending transactions. Default is true.
  bool include_pending = 2;
}

message SendTransactionRequest {
  // Transaction hash
  string hash = 1;
  // Hex string of the sender account addresss.
  string from = 2;
  // Hex string of the receiver account addresss.
  string to = 3;
  // Amount of value sending with this transaction.
  string value = 4; // uint128, len=16
  // Transaction timestamp.
  int64 timestamp = 5;
  // Transaction type.
  string tx_type = 6;
  // Transaction nonce.
  uint64 nonce = 7;
  // Transaction chain ID.
  uint32 chain_id = 8;

  // Transaction payload
  string payload = 20;

  // Transaction algorithm.
  uint32 alg = 30;
  // Transaction sign.
  string sign = 31;
  // Transaction payer's sign.
  string payer_sign = 32;
}

message SendTransactionResponse {
  // Hex string of transaction hash.
  string hash = 1;
}

message SubscribeRequest {
  repeated string topics = 1;
}

message SubscribeResponse {
  string topic = 1;
  string hash = 2;
}
