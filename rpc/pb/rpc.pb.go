// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccountRequest
	GetAccountResponse
	GetBlockRequest
	GetBlockResponse
	NonParamRequest
	Candidate
	GetCandidatesResponse
	GetDynastyResponse
	GetMedStateResponse
	GetTransactionsResponse
	GetTransactionRequest
	GetTransactionResponse
	GetAccountTransactionsRequest
	SendTransactionRequest
	SendTransactionResponse
	SubscribeRequest
	SubscribeResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// If you send type, height field is ignored.
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Block account state with height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *GetAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetAccountRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetAccountResponse struct {
	// Hex string of the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Current balance in unit of 1/(10^8) MED.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Current vesting in unit of 1/(10^8) MED.
	Vesting string `protobuf:"bytes,4,opt,name=vesting,proto3" json:"vesting,omitempty"`
	// Voted address.
	Voted []string `protobuf:"bytes,5,rep,name=voted" json:"voted,omitempty"`
	// List of record hash.
	Records []string `protobuf:"bytes,6,rep,name=records" json:"records,omitempty"`
	// Account addresses that have certificated the account.
	CertsReceived []string `protobuf:"bytes,7,rep,name=certs_received,json=certsReceived" json:"certs_received,omitempty"`
	// Account addresses certificated by the account.
	CertsIssued []string `protobuf:"bytes,8,rep,name=certs_issued,json=certsIssued" json:"certs_issued,omitempty"`
	// Transactions sent from account
	TxsFrom []string `protobuf:"bytes,9,rep,name=txs_from,json=txsFrom" json:"txs_from,omitempty"`
	// Transactions sent to account
	TxsTo []string `protobuf:"bytes,10,rep,name=txs_to,json=txsTo" json:"txs_to,omitempty"`
}

func (m *GetAccountResponse) Reset()                    { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()               {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *GetAccountResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetAccountResponse) GetVesting() string {
	if m != nil {
		return m.Vesting
	}
	return ""
}

func (m *GetAccountResponse) GetVoted() []string {
	if m != nil {
		return m.Voted
	}
	return nil
}

func (m *GetAccountResponse) GetRecords() []string {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GetAccountResponse) GetCertsReceived() []string {
	if m != nil {
		return m.CertsReceived
	}
	return nil
}

func (m *GetAccountResponse) GetCertsIssued() []string {
	if m != nil {
		return m.CertsIssued
	}
	return nil
}

func (m *GetAccountResponse) GetTxsFrom() []string {
	if m != nil {
		return m.TxsFrom
	}
	return nil
}

func (m *GetAccountResponse) GetTxsTo() []string {
	if m != nil {
		return m.TxsTo
	}
	return nil
}

type GetBlockRequest struct {
	// If you send hash, type and height field is ignored.
	// Block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *GetBlockRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBlockRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetBlockRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetBlockResponse struct {
	// Block height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Block hash
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block parent hash
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Block coinbase address
	Coinbase string `protobuf:"bytes,4,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Block reward
	Reward string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	// Block supply
	Supply string `protobuf:"bytes,6,opt,name=supply,proto3" json:"supply,omitempty"`
	// Block timestamp
	Timestamp int64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Block chain id
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Block signature algorithm
	Alg uint32 `protobuf:"varint,9,opt,name=alg,proto3" json:"alg,omitempty"`
	// Block signature
	Sign string `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
	// Root hash of accounts trie
	AccsRoot string `protobuf:"bytes,20,opt,name=accs_root,json=accsRoot,proto3" json:"accs_root,omitempty"`
	// Root hash of data trie
	DataRoot string `protobuf:"bytes,21,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty"`
	// Root hash of dpos state trie
	DposRoot string `protobuf:"bytes,22,opt,name=dpos_root,json=dposRoot,proto3" json:"dpos_root,omitempty"`
	// Root hash of usage trie
	UsageRoot string `protobuf:"bytes,23,opt,name=usage_root,json=usageRoot,proto3" json:"usage_root,omitempty"`
	// Transactions in block
	Transactions []*GetTransactionResponse `protobuf:"bytes,30,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetBlockResponse) Reset()                    { *m = GetBlockResponse{} }
func (m *GetBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBlockResponse) ProtoMessage()               {}
func (*GetBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *GetBlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetBlockResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBlockResponse) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *GetBlockResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *GetBlockResponse) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *GetBlockResponse) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *GetBlockResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetBlockResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetBlockResponse) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *GetBlockResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *GetBlockResponse) GetAccsRoot() string {
	if m != nil {
		return m.AccsRoot
	}
	return ""
}

func (m *GetBlockResponse) GetDataRoot() string {
	if m != nil {
		return m.DataRoot
	}
	return ""
}

func (m *GetBlockResponse) GetDposRoot() string {
	if m != nil {
		return m.DposRoot
	}
	return ""
}

func (m *GetBlockResponse) GetUsageRoot() string {
	if m != nil {
		return m.UsageRoot
	}
	return ""
}

func (m *GetBlockResponse) GetTransactions() []*GetTransactionResponse {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type NonParamRequest struct {
}

func (m *NonParamRequest) Reset()                    { *m = NonParamRequest{} }
func (m *NonParamRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamRequest) ProtoMessage()               {}
func (*NonParamRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

type Candidate struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Collatral string `protobuf:"bytes,2,opt,name=collatral,proto3" json:"collatral,omitempty"`
	VotePower string `protobuf:"bytes,3,opt,name=votePower,proto3" json:"votePower,omitempty"`
}

func (m *Candidate) Reset()                    { *m = Candidate{} }
func (m *Candidate) String() string            { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()               {}
func (*Candidate) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *Candidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Candidate) GetCollatral() string {
	if m != nil {
		return m.Collatral
	}
	return ""
}

func (m *Candidate) GetVotePower() string {
	if m != nil {
		return m.VotePower
	}
	return ""
}

type GetCandidatesResponse struct {
	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *GetCandidatesResponse) Reset()                    { *m = GetCandidatesResponse{} }
func (m *GetCandidatesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCandidatesResponse) ProtoMessage()               {}
func (*GetCandidatesResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *GetCandidatesResponse) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type GetDynastyResponse struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *GetDynastyResponse) Reset()                    { *m = GetDynastyResponse{} }
func (m *GetDynastyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDynastyResponse) ProtoMessage()               {}
func (*GetDynastyResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

func (m *GetDynastyResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type GetMedStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current tail block hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Current tail block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Current LIB hash
	LIB string `protobuf:"bytes,4,opt,name=LIB,proto3" json:"LIB,omitempty"`
}

func (m *GetMedStateResponse) Reset()                    { *m = GetMedStateResponse{} }
func (m *GetMedStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMedStateResponse) ProtoMessage()               {}
func (*GetMedStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *GetMedStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetMedStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetMedStateResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetMedStateResponse) GetLIB() string {
	if m != nil {
		return m.LIB
	}
	return ""
}

type GetTransactionsResponse struct {
	Transactions []*GetTransactionResponse `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetTransactionsResponse) Reset()                    { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()               {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *GetTransactionsResponse) GetTransactions() []*GetTransactionResponse {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *GetTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetTransactionResponse struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,6,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload.
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction algorithm
	Alg uint32 `protobuf:"varint,30,opt,name=alg,proto3" json:"alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
	// If transaction is executed and included in the block, it returns true. otherwise, false.
	Executed bool `protobuf:"varint,33,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *GetTransactionResponse) Reset()                    { *m = GetTransactionResponse{} }
func (m *GetTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionResponse) ProtoMessage()               {}
func (*GetTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *GetTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetTransactionResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetTransactionResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *GetTransactionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetTransactionResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetTransactionResponse) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *GetTransactionResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetTransactionResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetTransactionResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *GetTransactionResponse) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *GetTransactionResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *GetTransactionResponse) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

func (m *GetTransactionResponse) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

type GetAccountTransactionsRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Whether or not to include pending transactions. Default is true.
	IncludePending string `protobuf:"bytes,2,opt,name=include_pending,json=includePending,proto3" json:"include_pending,omitempty"`
}

func (m *GetAccountTransactionsRequest) Reset()         { *m = GetAccountTransactionsRequest{} }
func (m *GetAccountTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountTransactionsRequest) ProtoMessage()    {}
func (*GetAccountTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{12}
}

func (m *GetAccountTransactionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountTransactionsRequest) GetIncludePending() string {
	if m != nil {
		return m.IncludePending
	}
	return ""
}

type SendTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,6,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction algorithm.
	Alg uint32 `protobuf:"varint,30,opt,name=alg,proto3" json:"alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{13} }

func (m *SendTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SendTransactionRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendTransactionRequest) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransactionRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SendTransactionRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SendTransactionRequest) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *SendTransactionRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SendTransactionRequest) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type SubscribeRequest struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubscribeResponse struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountRequest)(nil), "rpcpb.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "rpcpb.GetAccountResponse")
	proto.RegisterType((*GetBlockRequest)(nil), "rpcpb.GetBlockRequest")
	proto.RegisterType((*GetBlockResponse)(nil), "rpcpb.GetBlockResponse")
	proto.RegisterType((*NonParamRequest)(nil), "rpcpb.NonParamRequest")
	proto.RegisterType((*Candidate)(nil), "rpcpb.Candidate")
	proto.RegisterType((*GetCandidatesResponse)(nil), "rpcpb.GetCandidatesResponse")
	proto.RegisterType((*GetDynastyResponse)(nil), "rpcpb.GetDynastyResponse")
	proto.RegisterType((*GetMedStateResponse)(nil), "rpcpb.GetMedStateResponse")
	proto.RegisterType((*GetTransactionsResponse)(nil), "rpcpb.GetTransactionsResponse")
	proto.RegisterType((*GetTransactionRequest)(nil), "rpcpb.GetTransactionRequest")
	proto.RegisterType((*GetTransactionResponse)(nil), "rpcpb.GetTransactionResponse")
	proto.RegisterType((*GetAccountTransactionsRequest)(nil), "rpcpb.GetAccountTransactionsRequest")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetCandidates(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetCandidatesResponse, error)
	GetDynasty(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error)
	GetMedState(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error)
	GetPendingTransactions(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetAccountTransactions(ctx context.Context, in *GetAccountTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandidates(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetCandidatesResponse, error) {
	out := new(GetCandidatesResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetCandidates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDynasty(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error) {
	out := new(GetDynastyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetDynasty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMedState(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error) {
	out := new(GetMedStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetMedState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPendingTransactions(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccountTransactions(ctx context.Context, in *GetAccountTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetCandidates(context.Context, *NonParamRequest) (*GetCandidatesResponse, error)
	GetDynasty(context.Context, *NonParamRequest) (*GetDynastyResponse, error)
	GetMedState(context.Context, *NonParamRequest) (*GetMedStateResponse, error)
	GetPendingTransactions(context.Context, *NonParamRequest) (*GetTransactionsResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	GetAccountTransactions(context.Context, *GetAccountTransactionsRequest) (*GetTransactionsResponse, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandidates(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetDynasty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDynasty(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMedState(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccountTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountTransactions(ctx, req.(*GetAccountTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ApiService_GetBlock_Handler,
		},
		{
			MethodName: "GetCandidates",
			Handler:    _ApiService_GetCandidates_Handler,
		},
		{
			MethodName: "GetDynasty",
			Handler:    _ApiService_GetDynasty_Handler,
		},
		{
			MethodName: "GetMedState",
			Handler:    _ApiService_GetMedState_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _ApiService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _ApiService_GetTransaction_Handler,
		},
		{
			MethodName: "GetAccountTransactions",
			Handler:    _ApiService_GetAccountTransactions_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcb, 0x8e, 0x1b, 0x45,
	0x14, 0x55, 0xdb, 0x33, 0xb6, 0xfb, 0x3a, 0xf3, 0x70, 0x65, 0x62, 0x57, 0x8c, 0x27, 0x71, 0x4a,
	0x41, 0x58, 0x83, 0x88, 0x43, 0xd8, 0x45, 0x62, 0x91, 0x80, 0x18, 0x46, 0x82, 0x68, 0xe8, 0x19,
	0x21, 0x81, 0x82, 0xac, 0x72, 0x77, 0xc5, 0xd3, 0xa2, 0xdd, 0xd5, 0x74, 0x95, 0x27, 0xb6, 0x10,
	0x1b, 0x96, 0x6c, 0xf9, 0x05, 0xb6, 0x7c, 0x05, 0x2b, 0xd6, 0xfc, 0x02, 0x5f, 0xc1, 0x0a, 0xd5,
	0xa3, 0x1f, 0x7e, 0x4d, 0xc8, 0x9a, 0x5d, 0xdf, 0x73, 0x6f, 0x9d, 0xeb, 0xba, 0x55, 0xe7, 0xd4,
	0x0c, 0xb8, 0x69, 0xe2, 0x3f, 0x4a, 0x52, 0x2e, 0x39, 0xda, 0x4d, 0x13, 0x3f, 0x19, 0x77, 0x7b,
	0x13, 0xce, 0x27, 0x11, 0x1b, 0xd2, 0x24, 0x1c, 0xd2, 0x38, 0xe6, 0x92, 0xca, 0x90, 0xc7, 0xc2,
	0x14, 0x91, 0x6f, 0xa0, 0x75, 0xca, 0xe4, 0x33, 0xdf, 0xe7, 0xb3, 0x58, 0x7a, 0xec, 0x87, 0x19,
	0x13, 0x12, 0x61, 0xa8, 0xd3, 0x20, 0x48, 0x99, 0x10, 0xd8, 0xe9, 0x3b, 0x03, 0xd7, 0xcb, 0x42,
	0x84, 0x60, 0x47, 0x2e, 0x12, 0x86, 0x2b, 0x1a, 0xd6, 0xdf, 0xa8, 0x0d, 0xb5, 0x2b, 0x16, 0x4e,
	0xae, 0x24, 0xae, 0xf6, 0x9d, 0xc1, 0x8e, 0x67, 0x23, 0xf2, 0x5b, 0x05, 0x50, 0x99, 0x5b, 0x24,
	0x3c, 0x16, 0xec, 0x06, 0x72, 0x0c, 0xf5, 0x31, 0x8d, 0x68, 0xec, 0x67, 0xfc, 0x59, 0x88, 0x8e,
	0x60, 0x37, 0xe6, 0x0a, 0x37, 0x1d, 0x4c, 0xa0, 0xea, 0xaf, 0x99, 0x90, 0x61, 0x3c, 0xc1, 0x3b,
	0xa6, 0xde, 0x86, 0xaa, 0xfe, 0x9a, 0x4b, 0x16, 0xe0, 0xdd, 0x7e, 0x75, 0xe0, 0x7a, 0x26, 0x50,
	0xf5, 0x29, 0xf3, 0x79, 0x1a, 0x08, 0x5c, 0xd3, 0x78, 0x16, 0xa2, 0x77, 0x61, 0xdf, 0x67, 0xa9,
	0x14, 0xa3, 0x94, 0xf9, 0x2c, 0xbc, 0x66, 0x01, 0xae, 0xeb, 0x82, 0x3d, 0x8d, 0x7a, 0x16, 0x44,
	0x0f, 0xe0, 0x96, 0x29, 0x0b, 0x85, 0x98, 0xb1, 0x00, 0x37, 0x74, 0x51, 0x53, 0x63, 0x67, 0x1a,
	0x42, 0x77, 0xa1, 0x21, 0xe7, 0x62, 0xf4, 0x2a, 0xe5, 0x53, 0xec, 0x9a, 0x26, 0x72, 0x2e, 0x3e,
	0x4b, 0xf9, 0x14, 0xdd, 0x81, 0x9a, 0x4a, 0x49, 0x8e, 0xc1, 0xfc, 0x2a, 0x39, 0x17, 0x97, 0x9c,
	0x7c, 0x05, 0x07, 0xa7, 0x4c, 0x3e, 0x8f, 0xb8, 0xff, 0x7d, 0x36, 0x7f, 0x04, 0x3b, 0x57, 0x54,
	0x5c, 0xd9, 0xf9, 0xe8, 0xef, 0xb7, 0x9a, 0xfc, 0x1f, 0x55, 0x38, 0x2c, 0x38, 0xed, 0xdc, 0x8b,
	0x62, 0xa7, 0x5c, 0x9c, 0x37, 0xab, 0x94, 0x9a, 0xdd, 0x87, 0x66, 0x42, 0x53, 0x16, 0xcb, 0x91,
	0x4e, 0x55, 0x75, 0x0a, 0x0c, 0xf4, 0xb9, 0x2a, 0xe8, 0x42, 0xc3, 0xe7, 0x61, 0x3c, 0xa6, 0x82,
	0xd9, 0xd9, 0xe7, 0xb1, 0x6a, 0x94, 0xb2, 0xd7, 0x34, 0x55, 0xd3, 0x57, 0x19, 0x1b, 0x29, 0x5c,
	0xcc, 0x92, 0x24, 0x5a, 0xe0, 0x9a, 0xc1, 0x4d, 0x84, 0x7a, 0xe0, 0xca, 0x70, 0xca, 0x84, 0xa4,
	0xd3, 0x04, 0xd7, 0xfb, 0xce, 0xa0, 0xea, 0x15, 0x80, 0x1a, 0xa8, 0x7f, 0x45, 0xc3, 0x78, 0x14,
	0xaa, 0x79, 0x3b, 0x83, 0x3d, 0xaf, 0xae, 0xe3, 0xb3, 0x00, 0x1d, 0x42, 0x95, 0x46, 0x13, 0xec,
	0x6a, 0x54, 0x7d, 0xaa, 0xbd, 0x88, 0x70, 0x12, 0x63, 0x30, 0x7b, 0x51, 0xdf, 0xe8, 0x1d, 0x70,
	0xa9, 0xef, 0x8b, 0x51, 0xca, 0xb9, 0xc4, 0x47, 0xe6, 0xb7, 0x2a, 0xc0, 0xe3, 0x5c, 0xaa, 0x64,
	0x40, 0x25, 0x35, 0xc9, 0x3b, 0x26, 0xa9, 0x80, 0x3c, 0x99, 0x70, 0xbb, 0xb2, 0x6d, 0x93, 0x09,
	0x37, 0x2b, 0x8f, 0x01, 0x66, 0x82, 0x4e, 0x98, 0xc9, 0x76, 0x74, 0xd6, 0xd5, 0x88, 0x4e, 0x3f,
	0x83, 0x5b, 0x32, 0xa5, 0xb1, 0xa0, 0xbe, 0x56, 0x1b, 0xbe, 0xd7, 0xaf, 0x0e, 0x9a, 0x4f, 0x8e,
	0x1f, 0x69, 0x4d, 0x3e, 0x3a, 0x65, 0xf2, 0xb2, 0xc8, 0x66, 0x47, 0xe4, 0x2d, 0x2d, 0x21, 0x2d,
	0x38, 0x78, 0xc1, 0xe3, 0x73, 0x9a, 0xd2, 0xa9, 0xbd, 0x18, 0x84, 0x82, 0xfb, 0x09, 0x8d, 0x83,
	0x30, 0xa0, 0xf2, 0x26, 0x21, 0xf5, 0xc0, 0xf5, 0x79, 0x14, 0x51, 0x99, 0xd2, 0xc8, 0x9e, 0x6b,
	0x01, 0xa8, 0xac, 0xd2, 0xc3, 0x39, 0x7f, 0xcd, 0x52, 0x7b, 0xb4, 0x05, 0x40, 0xce, 0xe0, 0xce,
	0x29, 0x93, 0x79, 0x17, 0x91, 0xdf, 0x9f, 0xc7, 0x00, 0x7e, 0x8e, 0x62, 0x47, 0xef, 0xe7, 0xd0,
	0xee, 0x27, 0x2f, 0xf7, 0x4a, 0x35, 0xe4, 0x89, 0xd6, 0xff, 0xa7, 0x8b, 0x98, 0x0a, 0xb9, 0xc8,
	0x79, 0x7a, 0xe0, 0xda, 0xdf, 0x69, 0x69, 0x5c, 0xaf, 0x00, 0x48, 0x0c, 0xb7, 0x4f, 0x99, 0xfc,
	0x92, 0x05, 0x17, 0x52, 0xd1, 0x65, 0x8b, 0xca, 0xb7, 0xc0, 0x59, 0xbe, 0x05, 0x4a, 0x18, 0x34,
	0x8c, 0x72, 0x61, 0xd0, 0x30, 0xda, 0x26, 0x0c, 0x75, 0x63, 0xbe, 0x38, 0x7b, 0x6e, 0x6f, 0xac,
	0xfa, 0x24, 0x2f, 0xa1, 0xb3, 0x7c, 0x18, 0xc5, 0x86, 0x57, 0x8f, 0xd0, 0x79, 0xfb, 0x23, 0x7c,
	0x5f, 0x0f, 0x73, 0xa9, 0x6e, 0xab, 0xc2, 0xc9, 0x9f, 0x15, 0x68, 0x6f, 0x66, 0xdd, 0x66, 0x08,
	0xda, 0x65, 0xec, 0xbe, 0xd5, 0x37, 0xda, 0x87, 0x8a, 0xe4, 0xf6, 0x4c, 0x2b, 0x92, 0x6b, 0x1f,
	0xa4, 0xd1, 0x2c, 0xd3, 0xa8, 0x09, 0x96, 0x05, 0xb7, 0xbb, 0x2a, 0xb8, 0x0e, 0xd4, 0xe5, 0x7c,
	0xa4, 0xbd, 0xc6, 0xea, 0x54, 0xce, 0x2f, 0x95, 0xdb, 0xe4, 0x26, 0x5c, 0x2f, 0x9b, 0xf0, 0x0d,
	0xfa, 0xc4, 0x50, 0x4f, 0xe8, 0x22, 0xe2, 0x34, 0xb0, 0xba, 0xcb, 0xc2, 0x4c, 0xb9, 0xf7, 0xd6,
	0x95, 0x7b, 0xbf, 0xa4, 0xdc, 0x63, 0x80, 0x84, 0x2e, 0x58, 0x3a, 0xd2, 0x99, 0xbe, 0xb9, 0xa9,
	0x1a, 0xb9, 0x50, 0xe9, 0x2e, 0x34, 0xd8, 0x9c, 0xf9, 0x33, 0xe5, 0xf3, 0x0f, 0xfa, 0xce, 0xa0,
	0xe1, 0xe5, 0x31, 0x19, 0xc3, 0x71, 0xf1, 0xf4, 0x2c, 0x9f, 0xee, 0x9b, 0x9e, 0xb8, 0xf7, 0xe0,
	0x20, 0x8c, 0xfd, 0x68, 0x16, 0xb0, 0x51, 0xc2, 0xe2, 0x40, 0xbd, 0x2e, 0x66, 0xc4, 0xfb, 0x16,
	0x3e, 0x37, 0x28, 0xf9, 0xbd, 0x02, 0xed, 0x0b, 0x16, 0x07, 0xff, 0xed, 0x78, 0xff, 0xf7, 0xe7,
	0x45, 0x3e, 0x80, 0xce, 0xda, 0xb8, 0xb6, 0xdf, 0x6f, 0x72, 0x02, 0x87, 0x17, 0xb3, 0xb1, 0xf0,
	0xd3, 0x70, 0xcc, 0xb2, 0xb9, 0xb6, 0xa1, 0x26, 0x79, 0x12, 0xfa, 0x99, 0x71, 0xd8, 0x88, 0x7c,
	0x0c, 0xad, 0x52, 0xad, 0x25, 0x3d, 0x82, 0x5d, 0x9d, 0xb6, 0xac, 0x26, 0xd8, 0xf4, 0xdc, 0x3d,
	0xf9, 0xa7, 0x0e, 0xf0, 0x2c, 0x09, 0x2f, 0x58, 0x7a, 0x1d, 0xfa, 0x0c, 0x7d, 0x0d, 0x50, 0x5c,
	0x1e, 0x84, 0x0b, 0xc1, 0x2f, 0xff, 0x99, 0xd4, 0xbd, 0xbb, 0x21, 0x63, 0x7a, 0x93, 0xdb, 0x3f,
	0xff, 0xf5, 0xf7, 0xaf, 0x95, 0x3d, 0xd4, 0x1c, 0x5e, 0x7f, 0x38, 0xa4, 0x96, 0xe9, 0x05, 0x34,
	0xb2, 0x57, 0x19, 0xb5, 0x8b, 0xb5, 0xe5, 0xa7, 0xbf, 0xdb, 0x59, 0xc3, 0x2d, 0x63, 0x4b, 0x33,
	0x36, 0x91, 0xab, 0x18, 0xc7, 0x9a, 0xe3, 0x3b, 0xd8, 0x5b, 0xb2, 0xea, 0x9c, 0x74, 0xe5, 0xd9,
	0xe8, 0xf6, 0x0a, 0xd2, 0x75, 0x63, 0x27, 0x6d, 0xcd, 0x7c, 0x88, 0xf6, 0x15, 0x73, 0x61, 0xdf,
	0xe8, 0x52, 0x8f, 0xc1, 0xda, 0xf7, 0x56, 0xee, 0xd2, 0x10, 0x56, 0x9c, 0x7e, 0x79, 0x08, 0x81,
	0xe5, 0x79, 0x09, 0xcd, 0x92, 0xc1, 0x6f, 0xa5, 0xed, 0x16, 0xb4, 0xab, 0x8f, 0x01, 0xb9, 0xab,
	0x79, 0x6f, 0xa3, 0x96, 0xe2, 0x8d, 0x79, 0xc0, 0x86, 0x53, 0x16, 0x08, 0x4d, 0x97, 0x6a, 0x0b,
	0xb5, 0x0a, 0x2d, 0xeb, 0x7e, 0x6b, 0xa3, 0x7b, 0x1b, 0xfd, 0xbc, 0x98, 0x4e, 0x5f, 0x37, 0xeb,
	0x22, 0xac, 0x9a, 0x95, 0xcd, 0x7d, 0x68, 0xdd, 0x01, 0xbd, 0x82, 0xfd, 0xe5, 0xc5, 0xa8, 0xb7,
	0xe5, 0x8d, 0x30, 0x1d, 0x6f, 0x7e, 0x41, 0x48, 0x47, 0x37, 0x6c, 0xa1, 0x83, 0x95, 0x86, 0xe8,
	0x17, 0x47, 0x6f, 0x6e, 0x83, 0xa9, 0xa1, 0x87, 0x6b, 0x37, 0x71, 0x83, 0xe7, 0xbd, 0x71, 0xab,
	0x27, 0xba, 0xf3, 0x43, 0x44, 0x4a, 0x97, 0x76, 0xf8, 0xa3, 0xf5, 0xc5, 0x9f, 0x96, 0x36, 0x8f,
	0x22, 0x38, 0x58, 0x11, 0x33, 0xca, 0xf6, 0xb5, 0xd9, 0x13, 0xf3, 0xee, 0x5b, 0x3c, 0x80, 0x74,
	0x75, 0xf7, 0x23, 0xb2, 0xba, 0xef, 0xa7, 0xce, 0x09, 0xfa, 0x16, 0xdc, 0x5c, 0xdf, 0x28, 0x93,
	0xc8, 0xaa, 0x3b, 0x74, 0xf1, 0x7a, 0xc2, 0x72, 0x63, 0xcd, 0x8d, 0xc8, 0x9e, 0xe2, 0x16, 0x59,
	0xfa, 0xa9, 0x73, 0xf2, 0xd8, 0x19, 0xd7, 0xf4, 0x3f, 0x42, 0x1f, 0xfd, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x11, 0xd1, 0xfd, 0x3a, 0x0d, 0x00, 0x00,
}
