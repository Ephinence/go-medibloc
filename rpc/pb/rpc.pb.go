// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccount
	Account
	Data
	GetBlock
	Block
	GetBlocks
	Blocks
	NonParamRequest
	Candidate
	Candidates
	Dynasty
	MedState
	Transactions
	GetTransaction
	Transaction
	TransactionReceipt
	SendTransaction
	TransactionHash
	SubscribeRequest
	SubscribeResponse
	Health
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccount struct {
	// Send only one between address and alias
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// String of the account alias.
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// Send only one between type and height
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Block account state with height
	Height uint64 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetAccount) Reset()                    { *m = GetAccount{} }
func (m *GetAccount) String() string            { return proto.CompactTextString(m) }
func (*GetAccount) ProtoMessage()               {}
func (*GetAccount) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *GetAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccount) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *GetAccount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetAccount) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Account struct {
	// Hex string of the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Current balance in unit of 1/(10^8) MED.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Current vesting in unit of 1/(10^8) MED.
	Vesting string `protobuf:"bytes,4,opt,name=vesting,proto3" json:"vesting,omitempty"`
	// Voted address.
	Voted       []string `protobuf:"bytes,5,rep,name=voted" json:"voted,omitempty"`
	Bandwidth   string   `protobuf:"bytes,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Unstaking   string   `protobuf:"bytes,7,opt,name=unstaking,proto3" json:"unstaking,omitempty"`
	Alias       string   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	CandidateId string   `protobuf:"bytes,9,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *Account) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Account) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *Account) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Account) GetVesting() string {
	if m != nil {
		return m.Vesting
	}
	return ""
}

func (m *Account) GetVoted() []string {
	if m != nil {
		return m.Voted
	}
	return nil
}

func (m *Account) GetBandwidth() string {
	if m != nil {
		return m.Bandwidth
	}
	return ""
}

func (m *Account) GetUnstaking() string {
	if m != nil {
		return m.Unstaking
	}
	return ""
}

func (m *Account) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Account) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

type Data struct {
	Alias string `protobuf:"bytes,1,opt,name=Alias,proto3" json:"Alias,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *Data) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type GetBlock struct {
	// Send only one among hash, type and height
	// Block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlock) Reset()                    { *m = GetBlock{} }
func (m *GetBlock) String() string            { return proto.CompactTextString(m) }
func (*GetBlock) ProtoMessage()               {}
func (*GetBlock) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *GetBlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBlock) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Block struct {
	// Block height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Block hash
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block parent hash
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Block coinbase address
	Coinbase string `protobuf:"bytes,4,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Block reward
	Reward string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	// Block supply
	Supply string `protobuf:"bytes,6,opt,name=supply,proto3" json:"supply,omitempty"`
	// Block timestamp
	Timestamp int64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Block chain id
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Block hash algorithm
	HashAlg uint32 `protobuf:"varint,9,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Block signature algorithm
	CryptoAlg uint32 `protobuf:"varint,10,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Block signature
	Sign string `protobuf:"bytes,11,opt,name=sign,proto3" json:"sign,omitempty"`
	// Root hash of accounts trie
	AccsRoot string `protobuf:"bytes,20,opt,name=accs_root,json=accsRoot,proto3" json:"accs_root,omitempty"`
	// Root hash of txs trie
	TxsRoot string `protobuf:"bytes,21,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	// Root hash of dpos state trie
	DposRoot string `protobuf:"bytes,22,opt,name=dpos_root,json=dposRoot,proto3" json:"dpos_root,omitempty"`
	// Transactions in block
	Transactions []*Transaction `protobuf:"bytes,30,rep,name=transactions" json:"transactions,omitempty"`
	TxHashes     []string       `protobuf:"bytes,31,rep,name=tx_hashes,json=txHashes" json:"tx_hashes,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *Block) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *Block) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *Block) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *Block) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Block) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *Block) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *Block) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Block) GetAccsRoot() string {
	if m != nil {
		return m.AccsRoot
	}
	return ""
}

func (m *Block) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *Block) GetDposRoot() string {
	if m != nil {
		return m.DposRoot
	}
	return ""
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetTxHashes() []string {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

type GetBlocks struct {
	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *GetBlocks) Reset()                    { *m = GetBlocks{} }
func (m *GetBlocks) String() string            { return proto.CompactTextString(m) }
func (*GetBlocks) ProtoMessage()               {}
func (*GetBlocks) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *GetBlocks) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetBlocks) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

type Blocks struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *Blocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type NonParamRequest struct {
}

func (m *NonParamRequest) Reset()                    { *m = NonParamRequest{} }
func (m *NonParamRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamRequest) ProtoMessage()               {}
func (*NonParamRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

type Candidate struct {
	CandidateId string `protobuf:"bytes,1,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Address     string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Collateral  string `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral,omitempty"`
	VotePower   string `protobuf:"bytes,5,opt,name=votePower,proto3" json:"votePower,omitempty"`
}

func (m *Candidate) Reset()                    { *m = Candidate{} }
func (m *Candidate) String() string            { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()               {}
func (*Candidate) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *Candidate) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *Candidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Candidate) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Candidate) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *Candidate) GetVotePower() string {
	if m != nil {
		return m.VotePower
	}
	return ""
}

type Candidates struct {
	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *Candidates) Reset()                    { *m = Candidates{} }
func (m *Candidates) String() string            { return proto.CompactTextString(m) }
func (*Candidates) ProtoMessage()               {}
func (*Candidates) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *Candidates) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type Dynasty struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Dynasty) Reset()                    { *m = Dynasty{} }
func (m *Dynasty) String() string            { return proto.CompactTextString(m) }
func (*Dynasty) ProtoMessage()               {}
func (*Dynasty) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *Dynasty) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type MedState struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current tail block hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Current tail block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Current LIB hash
	LIB string `protobuf:"bytes,4,opt,name=LIB,proto3" json:"LIB,omitempty"`
}

func (m *MedState) Reset()                    { *m = MedState{} }
func (m *MedState) String() string            { return proto.CompactTextString(m) }
func (*MedState) ProtoMessage()               {}
func (*MedState) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *MedState) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MedState) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *MedState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MedState) GetLIB() string {
	if m != nil {
		return m.LIB
	}
	return ""
}

type Transactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{12} }

func (m *Transactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetTransaction struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransaction) Reset()                    { *m = GetTransaction{} }
func (m *GetTransaction) String() string            { return proto.CompactTextString(m) }
func (*GetTransaction) ProtoMessage()               {}
func (*GetTransaction) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{13} }

func (m *GetTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Transaction struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,6,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload.
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction hash algorithm
	HashAlg uint32 `protobuf:"varint,29,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Transaction crypto algorithm
	CryptoAlg uint32 `protobuf:"varint,30,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
	// If transaction is executed and included in the block, it returns true. otherwise, false.
	Executed bool `protobuf:"varint,33,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Transaction) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *Transaction) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *Transaction) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Transaction) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

func (m *Transaction) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

type TransactionReceipt struct {
	Executed bool   `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
	CpuUsage string `protobuf:"bytes,2,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	NetUsate string `protobuf:"bytes,3,opt,name=netUsate,proto3" json:"netUsate,omitempty"`
	Error    string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TransactionReceipt) Reset()                    { *m = TransactionReceipt{} }
func (m *TransactionReceipt) String() string            { return proto.CompactTextString(m) }
func (*TransactionReceipt) ProtoMessage()               {}
func (*TransactionReceipt) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *TransactionReceipt) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *TransactionReceipt) GetCpuUsage() string {
	if m != nil {
		return m.CpuUsage
	}
	return ""
}

func (m *TransactionReceipt) GetNetUsate() string {
	if m != nil {
		return m.NetUsate
	}
	return ""
}

func (m *TransactionReceipt) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SendTransaction struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,5,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction hash algorithm
	HashAlg uint32 `protobuf:"varint,29,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Transaction crypto algorithm.
	CryptoAlg uint32 `protobuf:"varint,30,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
}

func (m *SendTransaction) Reset()                    { *m = SendTransaction{} }
func (m *SendTransaction) String() string            { return proto.CompactTextString(m) }
func (*SendTransaction) ProtoMessage()               {}
func (*SendTransaction) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *SendTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SendTransaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SendTransaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendTransaction) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *SendTransaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SendTransaction) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SendTransaction) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *SendTransaction) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *SendTransaction) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SendTransaction) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

type TransactionHash struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransactionHash) Reset()                    { *m = TransactionHash{} }
func (m *TransactionHash) String() string            { return proto.CompactTextString(m) }
func (*TransactionHash) ProtoMessage()               {}
func (*TransactionHash) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{17} }

func (m *TransactionHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type SubscribeRequest struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{18} }

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubscribeResponse struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{19} }

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Health struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *Health) Reset()                    { *m = Health{} }
func (m *Health) String() string            { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()               {}
func (*Health) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{20} }

func (m *Health) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*GetAccount)(nil), "rpcpb.GetAccount")
	proto.RegisterType((*Account)(nil), "rpcpb.Account")
	proto.RegisterType((*Data)(nil), "rpcpb.Data")
	proto.RegisterType((*GetBlock)(nil), "rpcpb.GetBlock")
	proto.RegisterType((*Block)(nil), "rpcpb.Block")
	proto.RegisterType((*GetBlocks)(nil), "rpcpb.GetBlocks")
	proto.RegisterType((*Blocks)(nil), "rpcpb.Blocks")
	proto.RegisterType((*NonParamRequest)(nil), "rpcpb.NonParamRequest")
	proto.RegisterType((*Candidate)(nil), "rpcpb.Candidate")
	proto.RegisterType((*Candidates)(nil), "rpcpb.Candidates")
	proto.RegisterType((*Dynasty)(nil), "rpcpb.Dynasty")
	proto.RegisterType((*MedState)(nil), "rpcpb.MedState")
	proto.RegisterType((*Transactions)(nil), "rpcpb.Transactions")
	proto.RegisterType((*GetTransaction)(nil), "rpcpb.GetTransaction")
	proto.RegisterType((*Transaction)(nil), "rpcpb.Transaction")
	proto.RegisterType((*TransactionReceipt)(nil), "rpcpb.TransactionReceipt")
	proto.RegisterType((*SendTransaction)(nil), "rpcpb.SendTransaction")
	proto.RegisterType((*TransactionHash)(nil), "rpcpb.TransactionHash")
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
	proto.RegisterType((*Health)(nil), "rpcpb.Health")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	GetAccountAPI(ctx context.Context, in *GetAccount, opts ...grpc.CallOption) (*Account, error)
	GetBlockAPI(ctx context.Context, in *GetBlock, opts ...grpc.CallOption) (*Block, error)
	GetBlocksAPI(ctx context.Context, in *GetBlocks, opts ...grpc.CallOption) (*Blocks, error)
	GetCandidatesAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Candidates, error)
	GetDynastyAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Dynasty, error)
	GetMedStateAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*MedState, error)
	GetPendingTransactionsAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Transactions, error)
	GetTransactionAPI(ctx context.Context, in *GetTransaction, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionReceiptAPI(ctx context.Context, in *GetTransaction, opts ...grpc.CallOption) (*TransactionReceipt, error)
	SendTransactionAPI(ctx context.Context, in *SendTransaction, opts ...grpc.CallOption) (*TransactionHash, error)
	SubscribeAPI(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeAPIClient, error)
	HealthCheckAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Health, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetAccountAPI(ctx context.Context, in *GetAccount, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockAPI(ctx context.Context, in *GetBlock, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlockAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlocksAPI(ctx context.Context, in *GetBlocks, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlocksAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandidatesAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Candidates, error) {
	out := new(Candidates)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetCandidatesAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDynastyAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Dynasty, error) {
	out := new(Dynasty)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetDynastyAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMedStateAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*MedState, error) {
	out := new(MedState)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetMedStateAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPendingTransactionsAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactionsAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionAPI(ctx context.Context, in *GetTransaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionReceiptAPI(ctx context.Context, in *GetTransaction, opts ...grpc.CallOption) (*TransactionReceipt, error) {
	out := new(TransactionReceipt)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionReceiptAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransactionAPI(ctx context.Context, in *SendTransaction, opts ...grpc.CallOption) (*TransactionHash, error) {
	out := new(TransactionHash)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendTransactionAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SubscribeAPI(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeAPIClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/SubscribeAPI", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeAPIClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeAPIClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeAPIClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeAPIClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) HealthCheckAPI(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/HealthCheckAPI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	GetAccountAPI(context.Context, *GetAccount) (*Account, error)
	GetBlockAPI(context.Context, *GetBlock) (*Block, error)
	GetBlocksAPI(context.Context, *GetBlocks) (*Blocks, error)
	GetCandidatesAPI(context.Context, *NonParamRequest) (*Candidates, error)
	GetDynastyAPI(context.Context, *NonParamRequest) (*Dynasty, error)
	GetMedStateAPI(context.Context, *NonParamRequest) (*MedState, error)
	GetPendingTransactionsAPI(context.Context, *NonParamRequest) (*Transactions, error)
	GetTransactionAPI(context.Context, *GetTransaction) (*Transaction, error)
	GetTransactionReceiptAPI(context.Context, *GetTransaction) (*TransactionReceipt, error)
	SendTransactionAPI(context.Context, *SendTransaction) (*TransactionHash, error)
	SubscribeAPI(*SubscribeRequest, ApiService_SubscribeAPIServer) error
	HealthCheckAPI(context.Context, *NonParamRequest) (*Health, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetAccountAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountAPI(ctx, req.(*GetAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockAPI(ctx, req.(*GetBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlocksAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlocksAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlocksAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlocksAPI(ctx, req.(*GetBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandidatesAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandidatesAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCandidatesAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandidatesAPI(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDynastyAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDynastyAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetDynastyAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDynastyAPI(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMedStateAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMedStateAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMedStateAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMedStateAPI(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPendingTransactionsAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactionsAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactionsAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactionsAPI(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionAPI(ctx, req.(*GetTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionReceiptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionReceiptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionReceiptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionReceiptAPI(ctx, req.(*GetTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransactionAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransactionAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendTransactionAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransactionAPI(ctx, req.(*SendTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SubscribeAPI_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).SubscribeAPI(m, &apiServiceSubscribeAPIServer{stream})
}

type ApiService_SubscribeAPIServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeAPIServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeAPIServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_HealthCheckAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheckAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/HealthCheckAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheckAPI(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountAPI",
			Handler:    _ApiService_GetAccountAPI_Handler,
		},
		{
			MethodName: "GetBlockAPI",
			Handler:    _ApiService_GetBlockAPI_Handler,
		},
		{
			MethodName: "GetBlocksAPI",
			Handler:    _ApiService_GetBlocksAPI_Handler,
		},
		{
			MethodName: "GetCandidatesAPI",
			Handler:    _ApiService_GetCandidatesAPI_Handler,
		},
		{
			MethodName: "GetDynastyAPI",
			Handler:    _ApiService_GetDynastyAPI_Handler,
		},
		{
			MethodName: "GetMedStateAPI",
			Handler:    _ApiService_GetMedStateAPI_Handler,
		},
		{
			MethodName: "GetPendingTransactionsAPI",
			Handler:    _ApiService_GetPendingTransactionsAPI_Handler,
		},
		{
			MethodName: "GetTransactionAPI",
			Handler:    _ApiService_GetTransactionAPI_Handler,
		},
		{
			MethodName: "GetTransactionReceiptAPI",
			Handler:    _ApiService_GetTransactionReceiptAPI_Handler,
		},
		{
			MethodName: "SendTransactionAPI",
			Handler:    _ApiService_SendTransactionAPI_Handler,
		},
		{
			MethodName: "HealthCheckAPI",
			Handler:    _ApiService_HealthCheckAPI_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeAPI",
			Handler:       _ApiService_SubscribeAPI_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 1347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcb, 0x6e, 0x23, 0x45,
	0x17, 0x56, 0xdb, 0x8e, 0x2f, 0xc7, 0xce, 0xc5, 0x35, 0x33, 0x49, 0xa7, 0xe7, 0x12, 0x4f, 0x69,
	0x7e, 0xfd, 0xd1, 0x2c, 0xe2, 0x61, 0x90, 0x58, 0x20, 0x01, 0xca, 0xcc, 0x88, 0x24, 0x68, 0x40,
	0x51, 0x27, 0x23, 0x24, 0x36, 0xa1, 0xdc, 0x5d, 0xd8, 0x4d, 0x3a, 0x5d, 0x4d, 0x57, 0x39, 0xe3,
	0x6c, 0x58, 0xf0, 0x0a, 0x6c, 0x10, 0x8f, 0xc2, 0x5b, 0x20, 0x5e, 0x01, 0xf1, 0x0c, 0x2c, 0x51,
	0x9d, 0xae, 0xbe, 0x26, 0x71, 0x58, 0xb2, 0xeb, 0x73, 0xa9, 0xef, 0x54, 0x9d, 0xcb, 0x77, 0x6c,
	0xe8, 0x25, 0xb1, 0xb7, 0x17, 0x27, 0x42, 0x09, 0xb2, 0x92, 0xc4, 0x5e, 0x3c, 0x71, 0x1e, 0x4d,
	0x85, 0x98, 0x86, 0x7c, 0xcc, 0xe2, 0x60, 0xcc, 0xa2, 0x48, 0x28, 0xa6, 0x02, 0x11, 0xc9, 0xd4,
	0x89, 0xce, 0x00, 0x0e, 0xb8, 0xda, 0xf7, 0x3c, 0x31, 0x8f, 0x14, 0xb1, 0xa1, 0xc3, 0x7c, 0x3f,
	0xe1, 0x52, 0xda, 0xd6, 0xc8, 0xda, 0xed, 0xb9, 0x99, 0x48, 0xee, 0xc3, 0x0a, 0x0b, 0x03, 0x26,
	0xed, 0x06, 0xea, 0x53, 0x81, 0x10, 0x68, 0xa9, 0xab, 0x98, 0xdb, 0x80, 0x4a, 0xfc, 0x26, 0x9b,
	0xd0, 0x9e, 0xf1, 0x60, 0x3a, 0x53, 0x76, 0x7f, 0x64, 0xed, 0xb6, 0x5c, 0x23, 0xd1, 0xbf, 0x2d,
	0xe8, 0xdc, 0x1d, 0xc7, 0x86, 0xce, 0x84, 0x85, 0x2c, 0xf2, 0xb8, 0x89, 0x94, 0x89, 0xfa, 0x06,
	0x91, 0xd0, 0xfa, 0x26, 0xc2, 0xa6, 0x82, 0xf6, 0xbf, 0xe4, 0x52, 0x05, 0xd1, 0xd4, 0x6e, 0xa5,
	0xfe, 0x46, 0xd4, 0xfe, 0x97, 0x42, 0x71, 0xdf, 0x5e, 0x19, 0x35, 0xf5, 0x8d, 0x51, 0x20, 0x8f,
	0xa0, 0x37, 0x61, 0x91, 0xff, 0x3e, 0xf0, 0xd5, 0xcc, 0x6e, 0xe3, 0x89, 0x42, 0xa1, 0xad, 0xf3,
	0x48, 0x2a, 0x76, 0xae, 0xf1, 0x3a, 0xa9, 0x35, 0x57, 0x14, 0x39, 0xe8, 0x96, 0x73, 0xf0, 0x14,
	0x06, 0x1e, 0x8b, 0xfc, 0xc0, 0x67, 0x8a, 0x9f, 0x05, 0xbe, 0xdd, 0x43, 0x63, 0x3f, 0xd7, 0x1d,
	0xf9, 0xf4, 0x11, 0xb4, 0xde, 0x30, 0xc5, 0x34, 0xc0, 0x3e, 0x02, 0xa4, 0x8f, 0x4e, 0x05, 0xfa,
	0x05, 0x74, 0x0f, 0xb8, 0x7a, 0x15, 0x0a, 0xef, 0x5c, 0x27, 0x74, 0xc6, 0xe4, 0xcc, 0x38, 0xe0,
	0x77, 0x9e, 0xe4, 0xc6, 0x8d, 0x49, 0x6e, 0x56, 0x92, 0xfc, 0x7b, 0x13, 0x56, 0x52, 0xa4, 0xc2,
	0xc3, 0x2a, 0x7b, 0xe4, 0x11, 0x1a, 0xa5, 0x08, 0x3b, 0xd0, 0x8f, 0x59, 0xc2, 0x23, 0x75, 0x86,
	0xa6, 0x26, 0x9a, 0x20, 0x55, 0x1d, 0x6a, 0x07, 0x07, 0xba, 0x9e, 0x08, 0xa2, 0x09, 0x93, 0xdc,
	0xa4, 0x39, 0x97, 0x75, 0xa0, 0x84, 0xbf, 0x67, 0x89, 0x4e, 0xb4, 0xb6, 0x18, 0x49, 0xeb, 0xe5,
	0x3c, 0x8e, 0xc3, 0x2b, 0x93, 0x66, 0x23, 0xe9, 0x1c, 0xab, 0xe0, 0x82, 0x4b, 0xc5, 0x2e, 0x62,
	0xcc, 0x71, 0xd3, 0x2d, 0x14, 0x64, 0x1b, 0xba, 0xde, 0x8c, 0x05, 0x91, 0xce, 0xa4, 0x4e, 0xf3,
	0xaa, 0xdb, 0x41, 0xf9, 0xc8, 0xd7, 0x26, 0x7d, 0xbd, 0x33, 0x16, 0x4e, 0x31, 0xc9, 0xab, 0x6e,
	0x47, 0xcb, 0xfb, 0xe1, 0x94, 0x3c, 0x06, 0xf0, 0x92, 0xab, 0x58, 0x09, 0x34, 0x02, 0x1a, 0x7b,
	0xa9, 0x46, 0x9b, 0x09, 0xb4, 0x64, 0x30, 0x8d, 0xb0, 0x21, 0x7b, 0x2e, 0x7e, 0x93, 0x87, 0xd0,
	0x63, 0x9e, 0x27, 0xcf, 0x12, 0x21, 0x94, 0x7d, 0x3f, 0x7d, 0x93, 0x56, 0xb8, 0x42, 0x28, 0x1d,
	0x4a, 0x2d, 0x8c, 0xed, 0x41, 0xda, 0x56, 0x6a, 0x91, 0x9a, 0x1e, 0x42, 0xcf, 0x8f, 0x85, 0xb1,
	0x6d, 0xa6, 0xe7, 0xb4, 0x02, 0x8d, 0x1f, 0xc1, 0x40, 0x25, 0x2c, 0x92, 0xcc, 0xc3, 0x19, 0xb3,
	0x9f, 0x8c, 0x9a, 0xbb, 0xfd, 0x97, 0x64, 0x0f, 0x27, 0x71, 0xef, 0xb4, 0x30, 0xb9, 0x15, 0x3f,
	0x0d, 0xaa, 0x16, 0x98, 0x7c, 0x2e, 0xed, 0x1d, 0xec, 0xd7, 0xae, 0x5a, 0x1c, 0xa2, 0x4c, 0xc7,
	0xd0, 0xcb, 0xfa, 0x03, 0x27, 0xee, 0xbb, 0x44, 0x5c, 0x98, 0xa2, 0xe2, 0x37, 0x59, 0x83, 0x86,
	0x12, 0x58, 0xd0, 0x96, 0xdb, 0x50, 0x82, 0xee, 0x41, 0xdb, 0x78, 0x3f, 0x83, 0xf6, 0x04, 0xbf,
	0x6c, 0x0b, 0x6f, 0x32, 0x30, 0x37, 0x41, 0xb3, 0x6b, 0x6c, 0x74, 0x08, 0xeb, 0x5f, 0x89, 0xe8,
	0x98, 0x25, 0xec, 0xc2, 0xe5, 0x3f, 0xcc, 0xb9, 0x54, 0xf4, 0x17, 0x0b, 0x7a, 0xaf, 0xb3, 0x0e,
	0xbe, 0xd6, 0xe2, 0xd6, 0xb5, 0x16, 0x2f, 0x4f, 0x74, 0xa3, 0x3a, 0xd1, 0x1b, 0xd0, 0x9c, 0x27,
	0xa1, 0x69, 0x2a, 0xfd, 0x49, 0x9e, 0x00, 0x78, 0x22, 0x0c, 0x99, 0xe2, 0x09, 0x0b, 0x4d, 0x3f,
	0x95, 0x34, 0xba, 0x43, 0xf4, 0xb0, 0x1e, 0x8b, 0xf7, 0x3c, 0x31, 0x4d, 0x55, 0x28, 0xe8, 0xa7,
	0x00, 0xf9, 0xcd, 0x24, 0x79, 0x01, 0x90, 0x5f, 0x23, 0x7b, 0xe5, 0x86, 0x79, 0x65, 0xee, 0xe6,
	0x96, 0x7c, 0xe8, 0xff, 0xa1, 0xf3, 0xe6, 0x2a, 0x62, 0x52, 0x61, 0x2b, 0x9a, 0x5b, 0x9a, 0xb3,
	0x3d, 0xb7, 0x50, 0x50, 0x0f, 0xba, 0x5f, 0x72, 0xff, 0x44, 0xe9, 0x0c, 0x94, 0xdb, 0xd2, 0xaa,
	0xb6, 0xa5, 0x1e, 0x4f, 0x16, 0x84, 0xf9, 0x78, 0xb2, 0x20, 0xbc, 0x6d, 0x3c, 0x75, 0x2e, 0xde,
	0x1e, 0xbd, 0x32, 0x4f, 0xd6, 0x9f, 0xf4, 0x73, 0x18, 0x9c, 0x96, 0x3b, 0xa1, 0xde, 0x41, 0xd6,
	0xbf, 0xeb, 0x20, 0xfa, 0x0c, 0xd6, 0x0e, 0xb8, 0x2a, 0xd9, 0x6f, 0xa2, 0x12, 0xfa, 0x57, 0x03,
	0xfa, 0x77, 0xf8, 0xe4, 0x1d, 0x66, 0xde, 0x53, 0xea, 0xb0, 0xb4, 0x84, 0x0d, 0x25, 0x90, 0x5b,
	0x59, 0x38, 0xcf, 0xc8, 0x20, 0x15, 0xaa, 0x93, 0xbd, 0x52, 0x9f, 0xec, 0x2d, 0xe8, 0xa8, 0xc5,
	0x19, 0x32, 0x99, 0x21, 0x04, 0xb5, 0x38, 0xd5, 0x5c, 0x96, 0x13, 0x7b, 0xa7, 0x4c, 0xec, 0x4b,
	0x88, 0xc0, 0x86, 0x4e, 0xcc, 0xae, 0x42, 0xc1, 0x7c, 0x33, 0xb8, 0x99, 0x58, 0xa1, 0x88, 0xc7,
	0xcb, 0x28, 0xe2, 0xc9, 0x6d, 0x14, 0xb1, 0x53, 0xa2, 0x88, 0xc7, 0x00, 0x31, 0xbb, 0xe2, 0xc9,
	0x19, 0x5a, 0x46, 0x69, 0x23, 0xa2, 0xe6, 0x44, 0x9b, 0x1d, 0xe8, 0xf2, 0x05, 0xf7, 0xe6, 0x7a,
	0xc7, 0x3c, 0x1d, 0x59, 0xbb, 0x5d, 0x37, 0x97, 0xe9, 0x8f, 0x40, 0xca, 0xb5, 0xe2, 0x1e, 0x0f,
	0x62, 0x55, 0x39, 0x61, 0x55, 0x4f, 0x20, 0xc5, 0xc6, 0xf3, 0x77, 0x92, 0x4d, 0x33, 0xa6, 0xcf,
	0x65, 0x6d, 0x8b, 0xb8, 0x7a, 0x27, 0x99, 0xe2, 0xa6, 0x08, 0xb9, 0xac, 0xb3, 0xc7, 0x93, 0x44,
	0x24, 0x59, 0x29, 0x50, 0xa0, 0xbf, 0x35, 0x60, 0xfd, 0x84, 0x47, 0xfe, 0x5d, 0xc5, 0x2e, 0xa8,
	0xa3, 0x56, 0xd8, 0xe6, 0xad, 0x85, 0x6d, 0x2d, 0x29, 0xec, 0xca, 0xcd, 0x85, 0x6d, 0xdf, 0x56,
	0xd8, 0xce, 0x7f, 0xb1, 0xb0, 0xf4, 0x7f, 0xb0, 0x5e, 0xca, 0xdb, 0xa1, 0x19, 0x8a, 0x6b, 0xc3,
	0xf4, 0x1c, 0x36, 0x4e, 0xe6, 0x13, 0xe9, 0x25, 0xc1, 0x84, 0x1b, 0xde, 0xd4, 0x83, 0xaf, 0x44,
	0x1c, 0x78, 0x19, 0x9d, 0x18, 0x89, 0x7e, 0x02, 0xc3, 0x92, 0xaf, 0x8c, 0x45, 0x24, 0x31, 0x3f,
	0x68, 0xce, 0x7e, 0x0e, 0xa0, 0x70, 0xd3, 0x82, 0xa6, 0x36, 0xb4, 0x0f, 0x39, 0x0b, 0x15, 0x16,
	0x4c, 0x9c, 0x9b, 0xe6, 0x69, 0x88, 0xf3, 0x97, 0xbf, 0x76, 0x01, 0xf6, 0xe3, 0xe0, 0x84, 0x27,
	0x97, 0x81, 0xc7, 0xc9, 0x01, 0xac, 0x16, 0x3f, 0xe7, 0xf6, 0x8f, 0x8f, 0xc8, 0xd0, 0x30, 0x47,
	0xa1, 0x75, 0xd6, 0x8c, 0xca, 0xc8, 0xf4, 0xde, 0x4f, 0x7f, 0xfc, 0xf9, 0x73, 0x63, 0x95, 0xf4,
	0xc7, 0x97, 0x1f, 0x8c, 0x99, 0xf9, 0x85, 0xf6, 0x19, 0xf4, 0xb3, 0xa5, 0xa3, 0x61, 0xd6, 0x0b,
	0x18, 0xd4, 0x39, 0x95, 0x4d, 0x42, 0x87, 0x08, 0xd1, 0x27, 0x3d, 0x0d, 0x81, 0x5b, 0x85, 0xbc,
	0x86, 0x41, 0xbe, 0xb5, 0x34, 0xc2, 0x46, 0x0d, 0x41, 0x3a, 0xab, 0x65, 0x08, 0x49, 0x09, 0x62,
	0x0c, 0x08, 0xe4, 0x18, 0x92, 0xbc, 0x83, 0x8d, 0x03, 0xae, 0x0a, 0xba, 0xd7, 0x40, 0x9b, 0xe6,
	0x58, 0x6d, 0x65, 0x39, 0xc3, 0x3a, 0xeb, 0x4b, 0xba, 0x89, 0x90, 0x1b, 0x64, 0x4d, 0x43, 0x16,
	0x2b, 0x80, 0xbc, 0xc5, 0x2c, 0x99, 0x2d, 0xb0, 0x0c, 0x33, 0x4b, 0x95, 0x71, 0xad, 0xa6, 0xca,
	0x37, 0x5b, 0xe4, 0x14, 0xa9, 0x37, 0x5b, 0x15, 0xcb, 0xe0, 0xb2, 0x2c, 0x66, 0xbe, 0x74, 0x1b,
	0xf1, 0xee, 0x91, 0xa1, 0xc6, 0x8b, 0x84, 0xcf, 0xc7, 0x17, 0xdc, 0x97, 0xb8, 0x71, 0xbe, 0x87,
	0xed, 0x03, 0xae, 0x8e, 0x79, 0xe4, 0x07, 0xd1, 0xb4, 0xbc, 0x22, 0x96, 0x05, 0xb8, 0x77, 0x7d,
	0x4f, 0x48, 0x3a, 0xc2, 0x20, 0x0e, 0xb1, 0x75, 0x90, 0xf2, 0xd2, 0x18, 0xc7, 0x29, 0x3a, 0xf9,
	0x1a, 0x86, 0xd5, 0xe5, 0xa1, 0x63, 0x3c, 0x28, 0x0a, 0x56, 0xb2, 0x38, 0x37, 0xac, 0x22, 0xba,
	0x85, 0x11, 0x86, 0x64, 0xbd, 0x16, 0x81, 0x5c, 0x80, 0x5d, 0x3d, 0x6e, 0x98, 0x70, 0x09, 0xfe,
	0xf6, 0x0d, 0xab, 0x2e, 0x3d, 0x44, 0x77, 0x30, 0xcc, 0x36, 0xd9, 0xaa, 0x85, 0x19, 0x27, 0x86,
	0x5f, 0xbf, 0x05, 0x52, 0x23, 0xbd, 0x72, 0xb2, 0x6a, 0x26, 0x67, 0xf3, 0x7a, 0x24, 0x3d, 0xeb,
	0xd4, 0xc1, 0x30, 0xf7, 0x69, 0xfd, 0x35, 0x1f, 0x5b, 0xcf, 0xc9, 0x37, 0x30, 0xc8, 0xe7, 0x58,
	0x63, 0x6f, 0x65, 0xd8, 0x35, 0x22, 0x70, 0xec, 0xeb, 0x86, 0x74, 0xea, 0xe9, 0x03, 0x84, 0x5f,
	0x27, 0xab, 0x1a, 0x5e, 0x66, 0xe6, 0x17, 0x16, 0x39, 0x86, 0xb5, 0x74, 0xc8, 0x5f, 0xcf, 0x78,
	0x3a, 0x75, 0xb7, 0x95, 0x39, 0x9b, 0x9c, 0xd4, 0xbd, 0x9a, 0xfe, 0x19, 0xea, 0x3c, 0x0d, 0x31,
	0x69, 0xe3, 0x7f, 0xbc, 0x0f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xde, 0xb7, 0xff, 0x2d, 0x15,
	0x0e, 0x00, 0x00,
}
