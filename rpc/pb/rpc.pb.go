// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccountStateRequest
	GetAccountStateResponse
	GetBlockRequest
	BlockResponse
	NonParamsRequest
	GetMedStateResponse
	GetTransactionRequest
	GetCurrentAccountTransactionsRequest
	SendTransactionRequest
	SendTransactionResponse
	TransactionData
	TransactionResponse
	SubscribeRequest
	SubscribeResponse
	GetBlocksRequest
	BlocksResponse
	TransactionsResponse
	AccountsResponse
	Candidate
	CandidatesResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// block account state with height. Or the string "genesis", "confirmed", "tail".
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type GetAccountStateResponse struct {
	// Hex string of the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Current balance in unit of 1/(10^8) MED.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Account addresses certificated by the account.
	CertsIssued []string `protobuf:"bytes,3,rep,name=certs_issued,json=certsIssued" json:"certs_issued,omitempty"`
	// Account addresses that have certificated the account.
	CertsReceived []string `protobuf:"bytes,4,rep,name=certs_received,json=certsReceived" json:"certs_received,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// List of record hash.
	Records []string `protobuf:"bytes,6,rep,name=records" json:"records,omitempty"`
	// Current vesting in unit of 1/(10^8) MED.
	Vesting string `protobuf:"bytes,7,opt,name=vesting,proto3" json:"vesting,omitempty"`
	// Voted address.
	Voted string `protobuf:"bytes,8,opt,name=voted,proto3" json:"voted,omitempty"`
	// Transactions sent from account
	TxsSend []string `protobuf:"bytes,9,rep,name=txs_send,json=txsSend" json:"txs_send,omitempty"`
	// Transactions sent to account
	TxsGet []string `protobuf:"bytes,10,rep,name=txs_get,json=txsGet" json:"txs_get,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *GetAccountStateResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountStateResponse) GetCertsIssued() []string {
	if m != nil {
		return m.CertsIssued
	}
	return nil
}

func (m *GetAccountStateResponse) GetCertsReceived() []string {
	if m != nil {
		return m.CertsReceived
	}
	return nil
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetAccountStateResponse) GetRecords() []string {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GetAccountStateResponse) GetVesting() string {
	if m != nil {
		return m.Vesting
	}
	return ""
}

func (m *GetAccountStateResponse) GetVoted() string {
	if m != nil {
		return m.Voted
	}
	return ""
}

func (m *GetAccountStateResponse) GetTxsSend() []string {
	if m != nil {
		return m.TxsSend
	}
	return nil
}

func (m *GetAccountStateResponse) GetTxsGet() []string {
	if m != nil {
		return m.TxsGet
	}
	return nil
}

type GetBlockRequest struct {
	// Block hash. Or the string "genesis", "confirmed", "tail".
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *GetBlockRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type BlockResponse struct {
	// Block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block parent hash
	ParentHash string `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Block coinbase address
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Block timestamp
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Block chain id
	ChainId uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Block signature algorithm
	Alg uint32 `protobuf:"varint,6,opt,name=alg,proto3" json:"alg,omitempty"`
	// Block signature
	Sign string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	// Root hash of accounts trie
	AccsRoot string `protobuf:"bytes,8,opt,name=accs_root,json=accsRoot,proto3" json:"accs_root,omitempty"`
	// Root hash of transactions trie
	TxsRoot string `protobuf:"bytes,9,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	// Root hash of usage trie
	UsageRoot string `protobuf:"bytes,10,opt,name=usage_root,json=usageRoot,proto3" json:"usage_root,omitempty"`
	// Root hash of records trie
	RecordsRoot string `protobuf:"bytes,11,opt,name=records_root,json=recordsRoot,proto3" json:"records_root,omitempty"`
	// Root hash of consensus trie
	ConsensusRoot string `protobuf:"bytes,12,opt,name=consensus_root,json=consensusRoot,proto3" json:"consensus_root,omitempty"`
	// Transactions in block
	Transactions []*TransactionResponse `protobuf:"bytes,13,rep,name=transactions" json:"transactions,omitempty"`
	// Block height
	Height uint64 `protobuf:"varint,14,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *BlockResponse) Reset()                    { *m = BlockResponse{} }
func (m *BlockResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()               {}
func (*BlockResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *BlockResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockResponse) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *BlockResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *BlockResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockResponse) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *BlockResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *BlockResponse) GetAccsRoot() string {
	if m != nil {
		return m.AccsRoot
	}
	return ""
}

func (m *BlockResponse) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *BlockResponse) GetUsageRoot() string {
	if m != nil {
		return m.UsageRoot
	}
	return ""
}

func (m *BlockResponse) GetRecordsRoot() string {
	if m != nil {
		return m.RecordsRoot
	}
	return ""
}

func (m *BlockResponse) GetConsensusRoot() string {
	if m != nil {
		return m.ConsensusRoot
	}
	return ""
}

func (m *BlockResponse) GetTransactions() []*TransactionResponse {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type NonParamsRequest struct {
}

func (m *NonParamsRequest) Reset()                    { *m = NonParamsRequest{} }
func (m *NonParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamsRequest) ProtoMessage()               {}
func (*NonParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

type GetMedStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current tail block hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Current tail block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Current LIB hash
	LIB string `protobuf:"bytes,4,opt,name=LIB,proto3" json:"LIB,omitempty"`
}

func (m *GetMedStateResponse) Reset()                    { *m = GetMedStateResponse{} }
func (m *GetMedStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMedStateResponse) ProtoMessage()               {}
func (*GetMedStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *GetMedStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetMedStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetMedStateResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetMedStateResponse) GetLIB() string {
	if m != nil {
		return m.LIB
	}
	return ""
}

type GetTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *GetTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GetCurrentAccountTransactionsRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Whether or not to include pending transactions. Default is true.
	IncludePending string `protobuf:"bytes,2,opt,name=include_pending,json=includePending,proto3" json:"include_pending,omitempty"`
}

func (m *GetCurrentAccountTransactionsRequest) Reset()         { *m = GetCurrentAccountTransactionsRequest{} }
func (m *GetCurrentAccountTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentAccountTransactionsRequest) ProtoMessage()    {}
func (*GetCurrentAccountTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{7}
}

func (m *GetCurrentAccountTransactionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetCurrentAccountTransactionsRequest) GetIncludePending() string {
	if m != nil {
		return m.IncludePending
	}
	return ""
}

type SendTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction Data type.
	Data *TransactionData `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction algorithm.
	Alg uint32 `protobuf:"varint,9,opt,name=alg,proto3" json:"alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,11,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *SendTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SendTransactionRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendTransactionRequest) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransactionRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SendTransactionRequest) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *SendTransactionRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SendTransactionRequest) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type TransactionData struct {
	// Transaction data type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Transaction data payload.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TransactionData) Reset()                    { *m = TransactionData{} }
func (m *TransactionData) String() string            { return proto.CompactTextString(m) }
func (*TransactionData) ProtoMessage()               {}
func (*TransactionData) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *TransactionData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransactionData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type TransactionResponse struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction Data type.
	Data *TransactionData `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction algorithm.
	Alg uint32 `protobuf:"varint,9,opt,name=alg,proto3" json:"alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,11,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
	// If transaction is executed and included in the block, it returns true. otherwise, false.
	Executed bool `protobuf:"varint,12,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *TransactionResponse) Reset()                    { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()               {}
func (*TransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *TransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionResponse) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionResponse) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *TransactionResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *TransactionResponse) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

func (m *TransactionResponse) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

type SubscribeRequest struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{12} }

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubscribeResponse struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{13} }

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetBlocksRequest struct {
	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *GetBlocksRequest) Reset()                    { *m = GetBlocksRequest{} }
func (m *GetBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksRequest) ProtoMessage()               {}
func (*GetBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *GetBlocksRequest) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetBlocksRequest) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

type BlocksResponse struct {
	Blocks []*BlockResponse `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *BlocksResponse) Reset()                    { *m = BlocksResponse{} }
func (m *BlocksResponse) String() string            { return proto.CompactTextString(m) }
func (*BlocksResponse) ProtoMessage()               {}
func (*BlocksResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *BlocksResponse) GetBlocks() []*BlockResponse {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type TransactionsResponse struct {
	Transactions []*TransactionResponse `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionsResponse) Reset()                    { *m = TransactionsResponse{} }
func (m *TransactionsResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionsResponse) ProtoMessage()               {}
func (*TransactionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *TransactionsResponse) GetTransactions() []*TransactionResponse {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type AccountsResponse struct {
	Accounts []*GetAccountStateResponse `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{17} }

func (m *AccountsResponse) GetAccounts() []*GetAccountStateResponse {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Candidate struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Collatral string `protobuf:"bytes,2,opt,name=collatral,proto3" json:"collatral,omitempty"`
	VotePower string `protobuf:"bytes,3,opt,name=votePower,proto3" json:"votePower,omitempty"`
}

func (m *Candidate) Reset()                    { *m = Candidate{} }
func (m *Candidate) String() string            { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()               {}
func (*Candidate) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{18} }

func (m *Candidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Candidate) GetCollatral() string {
	if m != nil {
		return m.Collatral
	}
	return ""
}

func (m *Candidate) GetVotePower() string {
	if m != nil {
		return m.VotePower
	}
	return ""
}

type CandidatesResponse struct {
	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *CandidatesResponse) Reset()                    { *m = CandidatesResponse{} }
func (m *CandidatesResponse) String() string            { return proto.CompactTextString(m) }
func (*CandidatesResponse) ProtoMessage()               {}
func (*CandidatesResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{19} }

func (m *CandidatesResponse) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*GetBlockRequest)(nil), "rpcpb.GetBlockRequest")
	proto.RegisterType((*BlockResponse)(nil), "rpcpb.BlockResponse")
	proto.RegisterType((*NonParamsRequest)(nil), "rpcpb.NonParamsRequest")
	proto.RegisterType((*GetMedStateResponse)(nil), "rpcpb.GetMedStateResponse")
	proto.RegisterType((*GetTransactionRequest)(nil), "rpcpb.GetTransactionRequest")
	proto.RegisterType((*GetCurrentAccountTransactionsRequest)(nil), "rpcpb.GetCurrentAccountTransactionsRequest")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*TransactionData)(nil), "rpcpb.TransactionData")
	proto.RegisterType((*TransactionResponse)(nil), "rpcpb.TransactionResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
	proto.RegisterType((*GetBlocksRequest)(nil), "rpcpb.GetBlocksRequest")
	proto.RegisterType((*BlocksResponse)(nil), "rpcpb.BlocksResponse")
	proto.RegisterType((*TransactionsResponse)(nil), "rpcpb.TransactionsResponse")
	proto.RegisterType((*AccountsResponse)(nil), "rpcpb.AccountsResponse")
	proto.RegisterType((*Candidate)(nil), "rpcpb.Candidate")
	proto.RegisterType((*CandidatesResponse)(nil), "rpcpb.CandidatesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	GetAccounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	GetCandidates(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*CandidatesResponse, error)
	GetDynasty(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error)
	GetCurrentAccountTransactions(ctx context.Context, in *GetCurrentAccountTransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	GetMedState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetPendingTransactions(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandidates(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*CandidatesResponse, error) {
	out := new(CandidatesResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetCandidates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDynasty(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetDynasty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error) {
	out := new(BlocksResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCurrentAccountTransactions(ctx context.Context, in *GetCurrentAccountTransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetCurrentAccountTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMedState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetMedStateResponse, error) {
	out := new(GetMedStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetMedState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPendingTransactions(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	GetAccounts(context.Context, *NonParamsRequest) (*AccountsResponse, error)
	GetCandidates(context.Context, *NonParamsRequest) (*CandidatesResponse, error)
	GetDynasty(context.Context, *NonParamsRequest) (*AccountsResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*BlockResponse, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*BlocksResponse, error)
	GetCurrentAccountTransactions(context.Context, *GetCurrentAccountTransactionsRequest) (*TransactionsResponse, error)
	GetMedState(context.Context, *NonParamsRequest) (*GetMedStateResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*TransactionResponse, error)
	GetPendingTransactions(context.Context, *NonParamsRequest) (*TransactionsResponse, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccounts(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandidates(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetDynasty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDynasty(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCurrentAccountTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentAccountTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCurrentAccountTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCurrentAccountTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCurrentAccountTransactions(ctx, req.(*GetCurrentAccountTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMedState(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountState",
			Handler:    _ApiService_GetAccountState_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _ApiService_GetAccounts_Handler,
		},
		{
			MethodName: "GetCandidates",
			Handler:    _ApiService_GetCandidates_Handler,
		},
		{
			MethodName: "GetDynasty",
			Handler:    _ApiService_GetDynasty_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ApiService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _ApiService_GetBlocks_Handler,
		},
		{
			MethodName: "GetCurrentAccountTransactions",
			Handler:    _ApiService_GetCurrentAccountTransactions_Handler,
		},
		{
			MethodName: "GetMedState",
			Handler:    _ApiService_GetMedState_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _ApiService_GetTransaction_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _ApiService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 1307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x97, 0xed, 0xc4, 0xf1, 0x8d, 0x63, 0xc7, 0xd9, 0xa4, 0xce, 0xf5, 0x9a, 0xd0, 0x74, 0x45,
	0xd5, 0x28, 0x85, 0xba, 0x04, 0x89, 0x87, 0x4a, 0x14, 0xf5, 0x8f, 0x30, 0xe5, 0x4f, 0xa9, 0x2e,
	0x88, 0x87, 0x22, 0x64, 0xad, 0xef, 0x16, 0xe7, 0x84, 0xb3, 0x7b, 0xdc, 0xae, 0x43, 0x22, 0xc4,
	0x0b, 0x1f, 0x01, 0xbe, 0x03, 0x2f, 0x7c, 0x01, 0x9e, 0xe0, 0x43, 0xf0, 0x15, 0xf8, 0x20, 0x68,
	0xe7, 0xf6, 0xfe, 0xf8, 0x1c, 0xa7, 0x85, 0x57, 0xde, 0x76, 0x67, 0xe6, 0x7e, 0x33, 0xfb, 0x9b,
	0x99, 0x9d, 0x3d, 0x70, 0x92, 0x38, 0xb8, 0x17, 0x27, 0x52, 0x4b, 0xb2, 0x9a, 0xc4, 0x41, 0x3c,
	0xf6, 0x76, 0x27, 0x52, 0x4e, 0xa6, 0x7c, 0xc0, 0xe2, 0x68, 0xc0, 0x84, 0x90, 0x9a, 0xe9, 0x48,
	0x0a, 0x95, 0x1a, 0xd1, 0x8f, 0xa1, 0x3f, 0xe4, 0xfa, 0x51, 0x10, 0xc8, 0x99, 0xd0, 0xc7, 0x9a,
	0x69, 0xee, 0xf3, 0xef, 0x66, 0x5c, 0x69, 0xe2, 0xc2, 0x1a, 0x0b, 0xc3, 0x84, 0x2b, 0xe5, 0xd6,
	0xf6, 0x6b, 0x07, 0x8e, 0x9f, 0x6d, 0x49, 0x1f, 0x9a, 0x27, 0x3c, 0x9a, 0x9c, 0x68, 0xb7, 0x8e,
	0x0a, 0xbb, 0xa3, 0xbf, 0xd5, 0x61, 0x67, 0x01, 0x4c, 0xc5, 0x52, 0x28, 0x7e, 0x05, 0x9a, 0x0b,
	0x6b, 0x63, 0x36, 0x65, 0x22, 0xe0, 0x16, 0x2e, 0xdb, 0x92, 0x5b, 0xb0, 0x1e, 0xf0, 0x44, 0xab,
	0x51, 0xa4, 0xd4, 0x8c, 0x87, 0x6e, 0x63, 0xbf, 0x71, 0xe0, 0xf8, 0x6d, 0x94, 0x3d, 0x43, 0x11,
	0xb9, 0x0d, 0xdd, 0xd4, 0x24, 0xe1, 0x01, 0x8f, 0xce, 0x78, 0xe8, 0xae, 0xa0, 0x51, 0x07, 0xa5,
	0xbe, 0x15, 0x92, 0x6d, 0x58, 0x15, 0xd2, 0x78, 0x58, 0xdd, 0xaf, 0x1d, 0xac, 0xf8, 0xe9, 0xc6,
	0x78, 0x4e, 0x78, 0x20, 0x93, 0x50, 0xb9, 0x4d, 0xfc, 0x2a, 0xdb, 0x1a, 0xcd, 0x19, 0x57, 0x3a,
	0x12, 0x13, 0x77, 0x2d, 0x8d, 0xc9, 0x6e, 0x0d, 0xd2, 0x99, 0xd4, 0x3c, 0x74, 0x5b, 0x28, 0x4f,
	0x37, 0xe4, 0x3a, 0xb4, 0xf4, 0xb9, 0x1a, 0x29, 0x2e, 0x42, 0xd7, 0x49, 0xa1, 0xf4, 0xb9, 0x3a,
	0xe6, 0x22, 0x24, 0x3b, 0x60, 0x96, 0xa3, 0x09, 0xd7, 0x2e, 0xa0, 0xa6, 0xa9, 0xcf, 0xd5, 0x90,
	0x6b, 0x7a, 0x1b, 0x36, 0x86, 0x5c, 0x3f, 0x9e, 0xca, 0xe0, 0xdb, 0x8c, 0x72, 0x02, 0x2b, 0x27,
	0x4c, 0x9d, 0x58, 0x86, 0x70, 0x4d, 0x7f, 0x6f, 0x40, 0xc7, 0x1a, 0x59, 0x2a, 0x2f, 0xb1, 0x22,
	0x37, 0xa1, 0x1d, 0xb3, 0x84, 0x0b, 0x3d, 0x42, 0x55, 0x4a, 0x24, 0xa4, 0xa2, 0x8f, 0x8c, 0x81,
	0x07, 0xad, 0x40, 0x46, 0x62, 0xcc, 0x14, 0x77, 0x1b, 0xa8, 0xcd, 0xf7, 0x64, 0x17, 0x1c, 0x1d,
	0x9d, 0x72, 0xa5, 0xd9, 0x69, 0xec, 0xae, 0xec, 0xd7, 0x0e, 0x1a, 0x7e, 0x21, 0x30, 0x67, 0x0b,
	0x4e, 0x58, 0x24, 0x46, 0x51, 0x88, 0xf4, 0x75, 0xfc, 0x35, 0xdc, 0x3f, 0x0b, 0x49, 0x0f, 0x1a,
	0x6c, 0x3a, 0x71, 0x9b, 0x28, 0x35, 0x4b, 0x13, 0x9b, 0x8a, 0x26, 0xc2, 0xb2, 0x86, 0x6b, 0x72,
	0x03, 0x1c, 0x16, 0x04, 0x6a, 0x94, 0x48, 0xa9, 0x2d, 0x6d, 0x2d, 0x23, 0xf0, 0xa5, 0xd4, 0x19,
	0x73, 0xa8, 0x73, 0x52, 0xaa, 0xf5, 0x79, 0xaa, 0xda, 0x03, 0x98, 0x29, 0x36, 0xe1, 0xa9, 0x12,
	0x50, 0xe9, 0xa0, 0x04, 0xd5, 0xb7, 0x60, 0xdd, 0xa6, 0x2b, 0x35, 0x68, 0xa3, 0x41, 0xdb, 0xca,
	0xd0, 0xc4, 0x54, 0x87, 0xa1, 0x4c, 0xa8, 0x99, 0x35, 0x5a, 0x47, 0xa3, 0x4e, 0x2e, 0x45, 0xb3,
	0x87, 0xb0, 0xae, 0x13, 0x26, 0x14, 0x0b, 0xb0, 0x33, 0xdc, 0xce, 0x7e, 0xe3, 0xa0, 0x7d, 0xe4,
	0xdd, 0xc3, 0xfe, 0xb9, 0xf7, 0x45, 0xa1, 0xca, 0x52, 0xe0, 0xcf, 0xd9, 0x97, 0xfa, 0xa1, 0x8b,
	0xe5, 0x95, 0xf5, 0x03, 0x81, 0xde, 0x73, 0x29, 0x5e, 0xb0, 0x84, 0x9d, 0x2a, 0x9b, 0x62, 0x2a,
	0x60, 0x6b, 0xc8, 0xf5, 0x67, 0x3c, 0x9c, 0x6f, 0x8f, 0x32, 0xc9, 0xb5, 0x79, 0x92, 0x09, 0xac,
	0x68, 0x16, 0x4d, 0x6d, 0x4e, 0x71, 0x5d, 0xf2, 0xd8, 0x28, 0x7b, 0x34, 0x09, 0xf9, 0xf4, 0xd9,
	0x63, 0xcc, 0xa1, 0xe3, 0x9b, 0x25, 0xbd, 0x0b, 0xd7, 0x86, 0x5c, 0xcf, 0x9d, 0x61, 0x79, 0xad,
	0x45, 0xf0, 0xe6, 0x90, 0xeb, 0x27, 0xb3, 0xc4, 0x94, 0x8d, 0x6d, 0xe3, 0xd2, 0xa7, 0xea, 0xd5,
	0x57, 0xc3, 0x1d, 0xd8, 0x88, 0x44, 0x30, 0x9d, 0x85, 0x7c, 0x14, 0x73, 0x11, 0x9a, 0x06, 0x4a,
	0xe3, 0xee, 0x5a, 0xf1, 0x8b, 0x54, 0x4a, 0x7f, 0xad, 0x43, 0xdf, 0xf4, 0xc7, 0xeb, 0x45, 0x66,
	0x64, 0xdf, 0x24, 0xf2, 0x34, 0x23, 0xc1, 0xac, 0x49, 0x17, 0xea, 0x5a, 0xda, 0x62, 0xae, 0x6b,
	0x89, 0xad, 0xc9, 0xa6, 0x33, 0x6e, 0x8f, 0x9f, 0x6e, 0xe6, 0x8b, 0x7b, 0xb5, 0x5a, 0xdc, 0x87,
	0xb0, 0x12, 0x32, 0xcd, 0xb0, 0x84, 0xdb, 0x47, 0xfd, 0xc5, 0x94, 0x3f, 0x65, 0x9a, 0xf9, 0x68,
	0x53, 0x5c, 0x22, 0x6b, 0xe5, 0x4b, 0xa4, 0x9c, 0xb9, 0xd6, 0xa5, 0xed, 0xe1, 0x2c, 0xb6, 0x07,
	0x94, 0xda, 0x63, 0x0f, 0x20, 0x66, 0x17, 0x3c, 0x19, 0xa1, 0x26, 0xad, 0x62, 0x07, 0x25, 0xc7,
	0xd1, 0x44, 0xd0, 0xb7, 0x61, 0x67, 0x81, 0xa7, 0xe5, 0x17, 0x01, 0xfd, 0x00, 0x36, 0x2a, 0xd1,
	0x63, 0x01, 0x5d, 0xc4, 0x3c, 0x33, 0x33, 0x6b, 0x93, 0xc1, 0x98, 0x5d, 0x4c, 0x25, 0x0b, 0xb3,
	0x4b, 0xd7, 0x6e, 0xe9, 0x9f, 0x75, 0xd8, 0x7a, 0x4d, 0x67, 0xff, 0xdf, 0xac, 0x98, 0xeb, 0x94,
	0x9f, 0xf3, 0x60, 0x66, 0x26, 0x81, 0xb9, 0x53, 0x5a, 0x7e, 0xbe, 0xa7, 0x87, 0xd0, 0x3b, 0x9e,
	0x8d, 0x55, 0x90, 0x44, 0xe3, 0x7c, 0x98, 0xf6, 0xa1, 0xa9, 0x65, 0x1c, 0x05, 0xa6, 0x61, 0xd2,
	0x21, 0x80, 0x3b, 0xfa, 0x3e, 0x6c, 0x96, 0x6c, 0x2d, 0xd5, 0xdb, 0xb0, 0x8a, 0x6a, 0xcb, 0x75,
	0xba, 0x31, 0x51, 0x22, 0x29, 0x96, 0x6c, 0xb3, 0xa6, 0xef, 0x41, 0x2f, 0x9b, 0x21, 0xaa, 0xd4,
	0x3e, 0x98, 0x94, 0x1a, 0xf2, 0x51, 0x4e, 0x4a, 0x1d, 0x25, 0x75, 0x2d, 0xe9, 0x43, 0xe8, 0x66,
	0x1f, 0x59, 0x9f, 0x6f, 0x41, 0x73, 0x8c, 0x12, 0x0c, 0xb0, 0x7d, 0xb4, 0x6d, 0x49, 0x9f, 0x1b,
	0x3d, 0xbe, 0xb5, 0xa1, 0x5f, 0xc2, 0xf6, 0xfc, 0xbd, 0x60, 0x51, 0xaa, 0x37, 0x69, 0xed, 0xdf,
	0xdd, 0xa4, 0xf4, 0x39, 0xf4, 0xec, 0xb5, 0x53, 0x60, 0x3e, 0x00, 0x33, 0x2d, 0x50, 0x66, 0xf1,
	0xde, 0xb0, 0x78, 0x4b, 0xde, 0x1a, 0x7e, 0x6e, 0x4f, 0x19, 0x38, 0x4f, 0x98, 0x08, 0xa3, 0x90,
	0xe9, 0xab, 0x9e, 0x20, 0xbb, 0xe0, 0x04, 0x72, 0x3a, 0x65, 0x3a, 0x61, 0xd9, 0x3d, 0x5b, 0x08,
	0x8c, 0xd6, 0x4c, 0xf9, 0x17, 0xf2, 0x7b, 0x9e, 0xd8, 0xc2, 0x2e, 0x04, 0xf4, 0x43, 0x20, 0xb9,
	0x8b, 0x22, 0xe8, 0xfb, 0x00, 0x41, 0x2e, 0xb5, 0x61, 0xf7, 0x6c, 0xd8, 0xb9, 0xb9, 0x5f, 0xb2,
	0x39, 0xfa, 0xc3, 0x01, 0x78, 0x14, 0x47, 0xc7, 0x3c, 0x39, 0x8b, 0x02, 0x4e, 0x24, 0xbe, 0x0e,
	0xca, 0xc7, 0x23, 0x7b, 0xcb, 0x8e, 0x8d, 0x79, 0xf7, 0x5e, 0xc1, 0x0a, 0xdd, 0xfb, 0xe9, 0xaf,
	0xbf, 0x7f, 0xa9, 0xef, 0x90, 0x6b, 0x83, 0xb3, 0x77, 0x06, 0x33, 0xc5, 0x93, 0x41, 0x46, 0x13,
	0xa2, 0xbf, 0x84, 0x76, 0xf1, 0xa5, 0x22, 0x3b, 0x16, 0xad, 0x3a, 0xc0, 0xbc, 0x4c, 0x51, 0xcd,
	0x13, 0xbd, 0x8e, 0xf8, 0x5b, 0x64, 0x73, 0x01, 0x9f, 0x7c, 0x05, 0x1d, 0x33, 0x57, 0xf2, 0xc3,
	0x2e, 0x47, 0xbf, 0x5e, 0xe5, 0xa8, 0xc0, 0xef, 0x23, 0x7e, 0x8f, 0x74, 0x0d, 0x7e, 0x41, 0x1c,
	0x39, 0x06, 0x18, 0x72, 0xfd, 0xf4, 0x42, 0x30, 0xa5, 0x2f, 0xfe, 0x43, 0xdc, 0x5b, 0x88, 0xdb,
	0x21, 0x6d, 0x83, 0x1b, 0x5a, 0x98, 0x4f, 0xa0, 0x95, 0x35, 0x16, 0xe9, 0x17, 0xc4, 0x96, 0x5f,
	0x6b, 0xde, 0xa5, 0x2d, 0x42, 0x37, 0x11, 0xae, 0x4d, 0x1c, 0x03, 0x87, 0xed, 0x42, 0x3e, 0x07,
	0x27, 0xef, 0xd2, 0x3c, 0xc0, 0x6a, 0xdf, 0x7a, 0xd7, 0xca, 0x70, 0x45, 0x78, 0x04, 0xf1, 0xd6,
	0x09, 0xe4, 0x78, 0x8a, 0xfc, 0x5c, 0x83, 0xbd, 0x2b, 0x07, 0x35, 0xb9, 0x5b, 0x78, 0x79, 0xe5,
	0x38, 0xf7, 0x6e, 0x2c, 0xf6, 0x67, 0xe1, 0xff, 0x0e, 0xfa, 0xbf, 0x45, 0x6e, 0xe6, 0x69, 0xfd,
	0xc1, 0xb6, 0xcd, 0x8f, 0x83, 0xb9, 0x57, 0xd0, 0xd7, 0x58, 0x40, 0xd9, 0xcb, 0x66, 0x79, 0x22,
	0xbc, 0x22, 0xb4, 0xea, 0x33, 0x68, 0xbe, 0x86, 0x84, 0x0c, 0xf9, 0xe0, 0x94, 0x87, 0x69, 0x7d,
	0x06, 0xd0, 0x9d, 0x7f, 0xc8, 0x90, 0xdd, 0x02, 0x68, 0xf1, 0x15, 0xe1, 0x5d, 0x71, 0xe9, 0xd0,
	0x1d, 0x74, 0xb3, 0x49, 0x36, 0x8c, 0x9b, 0xd2, 0x21, 0x48, 0x8c, 0x7f, 0x43, 0xf6, 0x8d, 0x32,
	0x47, 0xe8, 0xd2, 0xe3, 0x5c, 0x49, 0xde, 0x3e, 0x3a, 0xf2, 0x88, 0x5b, 0x71, 0xa4, 0x06, 0xf6,
	0x75, 0x44, 0xa6, 0xb0, 0x51, 0x19, 0xef, 0x79, 0x9f, 0x5f, 0xfe, 0x3c, 0xca, 0xfb, 0x7c, 0xc9,
	0xab, 0x80, 0x7a, 0xe8, 0x73, 0x9b, 0x56, 0x0f, 0xf7, 0xa0, 0x76, 0x48, 0x5e, 0x82, 0x93, 0x8f,
	0x9b, 0xfc, 0x48, 0xd5, 0x61, 0xe5, 0xb9, 0x8b, 0x0a, 0x8b, 0xed, 0x22, 0x36, 0xa1, 0x1d, 0x83,
	0xad, 0x32, 0xf5, 0x83, 0xda, 0xe1, 0xfd, 0xda, 0xb8, 0x89, 0x3f, 0x94, 0xef, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x14, 0x46, 0x9e, 0x82, 0x0e, 0x00, 0x00,
}
