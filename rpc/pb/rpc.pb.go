// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccountRequest
	Account
	Data
	GetBlockRequest
	Block
	GetBlocksRequest
	Blocks
	NonParamRequest
	Candidate
	Candidates
	Dynasty
	MedState
	Transactions
	GetTransactionRequest
	Transaction
	TransactionReceipt
	SendTransactionRequest
	TransactionHash
	SubscribeRequest
	SubscribeResponse
	Health
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountRequest struct {
	// Send only one between address and alias
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// String of the account alias.
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// Send only one between type and height
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Block account state with height
	Height uint64 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *GetAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *GetAccountRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetAccountRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Account struct {
	// Hex string of the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Current balance in unit of 1/(10^8) MED.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Current vesting in unit of 1/(10^8) MED.
	Vesting string `protobuf:"bytes,4,opt,name=vesting,proto3" json:"vesting,omitempty"`
	// Voted address.
	Voted       []string `protobuf:"bytes,5,rep,name=voted" json:"voted,omitempty"`
	Bandwidth   string   `protobuf:"bytes,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Unstaking   string   `protobuf:"bytes,7,opt,name=unstaking,proto3" json:"unstaking,omitempty"`
	Alias       string   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	CandidateId string   `protobuf:"bytes,9,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *Account) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Account) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *Account) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Account) GetVesting() string {
	if m != nil {
		return m.Vesting
	}
	return ""
}

func (m *Account) GetVoted() []string {
	if m != nil {
		return m.Voted
	}
	return nil
}

func (m *Account) GetBandwidth() string {
	if m != nil {
		return m.Bandwidth
	}
	return ""
}

func (m *Account) GetUnstaking() string {
	if m != nil {
		return m.Unstaking
	}
	return ""
}

func (m *Account) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Account) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

type Data struct {
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *Data) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type GetBlockRequest struct {
	// Send only one among hash, type and height
	// Block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block type "genesis", "confirmed", or "tail".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *GetBlockRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBlockRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetBlockRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Block struct {
	// Block height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Block hash
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Block parent hash
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Block coinbase address
	Coinbase string `protobuf:"bytes,4,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Block reward
	Reward string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	// Block supply
	Supply string `protobuf:"bytes,6,opt,name=supply,proto3" json:"supply,omitempty"`
	// Block timestamp
	Timestamp int64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Block chain id
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Block hash algorithm
	HashAlg uint32 `protobuf:"varint,9,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Block signature algorithm
	CryptoAlg uint32 `protobuf:"varint,10,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Block signature
	Sign string `protobuf:"bytes,11,opt,name=sign,proto3" json:"sign,omitempty"`
	// Root hash of accounts trie
	AccsRoot string `protobuf:"bytes,20,opt,name=accs_root,json=accsRoot,proto3" json:"accs_root,omitempty"`
	// Root hash of txs trie
	TxsRoot string `protobuf:"bytes,21,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	// Root hash of dpos state trie
	DposRoot string `protobuf:"bytes,22,opt,name=dpos_root,json=dposRoot,proto3" json:"dpos_root,omitempty"`
	// Transactions in block
	Transactions []*Transaction `protobuf:"bytes,30,rep,name=transactions" json:"transactions,omitempty"`
	TxHashes     []string       `protobuf:"bytes,31,rep,name=tx_hashes,json=txHashes" json:"tx_hashes,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *Block) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *Block) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *Block) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

func (m *Block) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Block) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *Block) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *Block) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Block) GetAccsRoot() string {
	if m != nil {
		return m.AccsRoot
	}
	return ""
}

func (m *Block) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *Block) GetDposRoot() string {
	if m != nil {
		return m.DposRoot
	}
	return ""
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetTxHashes() []string {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

type GetBlocksRequest struct {
	From uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *GetBlocksRequest) Reset()                    { *m = GetBlocksRequest{} }
func (m *GetBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksRequest) ProtoMessage()               {}
func (*GetBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *GetBlocksRequest) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetBlocksRequest) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

type Blocks struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *Blocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type NonParamRequest struct {
}

func (m *NonParamRequest) Reset()                    { *m = NonParamRequest{} }
func (m *NonParamRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamRequest) ProtoMessage()               {}
func (*NonParamRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

type Candidate struct {
	CandidateId string `protobuf:"bytes,1,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Address     string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Collateral  string `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral,omitempty"`
	VotePower   string `protobuf:"bytes,5,opt,name=vote_power,json=votePower,proto3" json:"vote_power,omitempty"`
}

func (m *Candidate) Reset()                    { *m = Candidate{} }
func (m *Candidate) String() string            { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()               {}
func (*Candidate) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *Candidate) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *Candidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Candidate) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Candidate) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *Candidate) GetVotePower() string {
	if m != nil {
		return m.VotePower
	}
	return ""
}

type Candidates struct {
	Candidates []*Candidate `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *Candidates) Reset()                    { *m = Candidates{} }
func (m *Candidates) String() string            { return proto.CompactTextString(m) }
func (*Candidates) ProtoMessage()               {}
func (*Candidates) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *Candidates) GetCandidates() []*Candidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type Dynasty struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Dynasty) Reset()                    { *m = Dynasty{} }
func (m *Dynasty) String() string            { return proto.CompactTextString(m) }
func (*Dynasty) ProtoMessage()               {}
func (*Dynasty) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *Dynasty) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type MedState struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current tail block hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Current tail block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Current LIB hash
	Lib string `protobuf:"bytes,4,opt,name=lib,proto3" json:"lib,omitempty"`
}

func (m *MedState) Reset()                    { *m = MedState{} }
func (m *MedState) String() string            { return proto.CompactTextString(m) }
func (*MedState) ProtoMessage()               {}
func (*MedState) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *MedState) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MedState) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *MedState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MedState) GetLib() string {
	if m != nil {
		return m.Lib
	}
	return ""
}

type Transactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{12} }

func (m *Transactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{13} }

func (m *GetTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Transaction struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,6,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload.
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction hash algorithm
	HashAlg uint32 `protobuf:"varint,29,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Transaction crypto algorithm
	CryptoAlg uint32 `protobuf:"varint,30,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
	// If transaction is executed and included in the block, it returns true. otherwise, false.
	Executed bool `protobuf:"varint,33,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Transaction) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *Transaction) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *Transaction) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Transaction) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

func (m *Transaction) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

type TransactionReceipt struct {
	Executed bool   `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
	CpuUsage string `protobuf:"bytes,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	NetUsage string `protobuf:"bytes,3,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	Error    string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TransactionReceipt) Reset()                    { *m = TransactionReceipt{} }
func (m *TransactionReceipt) String() string            { return proto.CompactTextString(m) }
func (*TransactionReceipt) ProtoMessage()               {}
func (*TransactionReceipt) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *TransactionReceipt) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *TransactionReceipt) GetCpuUsage() string {
	if m != nil {
		return m.CpuUsage
	}
	return ""
}

func (m *TransactionReceipt) GetNetUsage() string {
	if m != nil {
		return m.NetUsage
	}
	return ""
}

func (m *TransactionReceipt) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SendTransactionRequest struct {
	// Transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction timestamp.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction type.
	TxType string `protobuf:"bytes,5,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transaction chain ID.
	ChainId uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction payload
	Payload string `protobuf:"bytes,20,opt,name=payload,proto3" json:"payload,omitempty"`
	// Transaction hash algorithm
	HashAlg uint32 `protobuf:"varint,29,opt,name=hash_alg,json=hashAlg,proto3" json:"hash_alg,omitempty"`
	// Transaction crypto algorithm.
	CryptoAlg uint32 `protobuf:"varint,30,opt,name=crypto_alg,json=cryptoAlg,proto3" json:"crypto_alg,omitempty"`
	// Transaction sign.
	Sign string `protobuf:"bytes,31,opt,name=sign,proto3" json:"sign,omitempty"`
	// Transaction payer's sign.
	PayerSign string `protobuf:"bytes,32,opt,name=payer_sign,json=payerSign,proto3" json:"payer_sign,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *SendTransactionRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SendTransactionRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendTransactionRequest) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransactionRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *SendTransactionRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SendTransactionRequest) GetHashAlg() uint32 {
	if m != nil {
		return m.HashAlg
	}
	return 0
}

func (m *SendTransactionRequest) GetCryptoAlg() uint32 {
	if m != nil {
		return m.CryptoAlg
	}
	return 0
}

func (m *SendTransactionRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *SendTransactionRequest) GetPayerSign() string {
	if m != nil {
		return m.PayerSign
	}
	return ""
}

type TransactionHash struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransactionHash) Reset()                    { *m = TransactionHash{} }
func (m *TransactionHash) String() string            { return proto.CompactTextString(m) }
func (*TransactionHash) ProtoMessage()               {}
func (*TransactionHash) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{17} }

func (m *TransactionHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type SubscribeRequest struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{18} }

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type SubscribeResponse struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{19} }

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Health struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *Health) Reset()                    { *m = Health{} }
func (m *Health) String() string            { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()               {}
func (*Health) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{20} }

func (m *Health) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*GetAccountRequest)(nil), "rpcpb.GetAccountRequest")
	proto.RegisterType((*Account)(nil), "rpcpb.Account")
	proto.RegisterType((*Data)(nil), "rpcpb.Data")
	proto.RegisterType((*GetBlockRequest)(nil), "rpcpb.GetBlockRequest")
	proto.RegisterType((*Block)(nil), "rpcpb.Block")
	proto.RegisterType((*GetBlocksRequest)(nil), "rpcpb.GetBlocksRequest")
	proto.RegisterType((*Blocks)(nil), "rpcpb.Blocks")
	proto.RegisterType((*NonParamRequest)(nil), "rpcpb.NonParamRequest")
	proto.RegisterType((*Candidate)(nil), "rpcpb.Candidate")
	proto.RegisterType((*Candidates)(nil), "rpcpb.Candidates")
	proto.RegisterType((*Dynasty)(nil), "rpcpb.Dynasty")
	proto.RegisterType((*MedState)(nil), "rpcpb.MedState")
	proto.RegisterType((*Transactions)(nil), "rpcpb.Transactions")
	proto.RegisterType((*GetTransactionRequest)(nil), "rpcpb.GetTransactionRequest")
	proto.RegisterType((*Transaction)(nil), "rpcpb.Transaction")
	proto.RegisterType((*TransactionReceipt)(nil), "rpcpb.TransactionReceipt")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*TransactionHash)(nil), "rpcpb.TransactionHash")
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
	proto.RegisterType((*Health)(nil), "rpcpb.Health")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*Block, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*Blocks, error)
	GetCandidates(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Candidates, error)
	GetDynasty(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Dynasty, error)
	GetMedState(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*MedState, error)
	GetPendingTransactions(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Transactions, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionReceipt(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionReceipt, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionHash, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
	HealthCheck(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Health, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandidates(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Candidates, error) {
	out := new(Candidates)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetCandidates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDynasty(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Dynasty, error) {
	out := new(Dynasty)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetDynasty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMedState(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*MedState, error) {
	out := new(MedState)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetMedState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPendingTransactions(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionReceipt(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionReceipt, error) {
	out := new(TransactionReceipt)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionHash, error) {
	out := new(TransactionHash)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *NonParamRequest, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	GetBlock(context.Context, *GetBlockRequest) (*Block, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*Blocks, error)
	GetCandidates(context.Context, *NonParamRequest) (*Candidates, error)
	GetDynasty(context.Context, *NonParamRequest) (*Dynasty, error)
	GetMedState(context.Context, *NonParamRequest) (*MedState, error)
	GetPendingTransactions(context.Context, *NonParamRequest) (*Transactions, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	GetTransactionReceipt(context.Context, *GetTransactionRequest) (*TransactionReceipt, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*TransactionHash, error)
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
	HealthCheck(context.Context, *NonParamRequest) (*Health, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandidates(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetDynasty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDynasty(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMedState(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactions(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*NonParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ApiService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _ApiService_GetBlocks_Handler,
		},
		{
			MethodName: "GetCandidates",
			Handler:    _ApiService_GetCandidates_Handler,
		},
		{
			MethodName: "GetDynasty",
			Handler:    _ApiService_GetDynasty_Handler,
		},
		{
			MethodName: "GetMedState",
			Handler:    _ApiService_GetMedState_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _ApiService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _ApiService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _ApiService_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 1357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0xf5, 0xcf, 0x91, 0x6d, 0x59, 0x1b, 0x47, 0xa6, 0x15, 0x3b, 0x56, 0x16, 0x2d, 0x6a,
	0xa4, 0x80, 0x95, 0xa6, 0x40, 0x0e, 0x05, 0x5a, 0x20, 0x4d, 0x50, 0x39, 0x28, 0x52, 0x24, 0x74,
	0x8a, 0x1e, 0x7a, 0x10, 0x56, 0xe4, 0x56, 0x22, 0x4c, 0x73, 0x19, 0xee, 0xca, 0x96, 0x6f, 0x45,
	0x5f, 0xa1, 0xa7, 0xde, 0xfa, 0x2a, 0x7d, 0x84, 0xa2, 0xaf, 0x50, 0xf4, 0x19, 0x7a, 0x2c, 0x76,
	0xb8, 0xa4, 0x48, 0xc9, 0x32, 0x72, 0xec, 0x6d, 0x67, 0xbe, 0xd9, 0x6f, 0x96, 0xf3, 0x2b, 0x81,
	0x9d, 0xc4, 0xde, 0x69, 0x9c, 0x08, 0x25, 0x48, 0x3d, 0x89, 0xbd, 0x78, 0xd2, 0x3f, 0x9c, 0x0a,
	0x31, 0x0d, 0xf9, 0x90, 0xc5, 0xc1, 0x90, 0x45, 0x91, 0x50, 0x4c, 0x05, 0x22, 0x92, 0xa9, 0x11,
	0x15, 0xd0, 0x1d, 0x71, 0xf5, 0xdc, 0xf3, 0xc4, 0x3c, 0x52, 0x2e, 0x7f, 0x3f, 0xe7, 0x52, 0x11,
	0x07, 0x9a, 0xcc, 0xf7, 0x13, 0x2e, 0xa5, 0x63, 0x0d, 0xac, 0x13, 0xdb, 0xcd, 0x44, 0xb2, 0x07,
	0x75, 0x16, 0x06, 0x4c, 0x3a, 0x15, 0xd4, 0xa7, 0x02, 0x21, 0x50, 0x53, 0x37, 0x31, 0x77, 0x00,
	0x95, 0x78, 0x26, 0x3d, 0x68, 0xcc, 0x78, 0x30, 0x9d, 0x29, 0xa7, 0x3d, 0xb0, 0x4e, 0x6a, 0xae,
	0x91, 0xe8, 0xbf, 0x16, 0x34, 0x8d, 0xbb, 0x3b, 0xfc, 0x38, 0xd0, 0x9c, 0xb0, 0x90, 0x45, 0x1e,
	0x37, 0x9e, 0x32, 0x51, 0xbf, 0x20, 0x12, 0x5a, 0x5f, 0x45, 0xda, 0x54, 0xd0, 0xf6, 0x57, 0x5c,
	0xaa, 0x20, 0x9a, 0x3a, 0xb5, 0xd4, 0xde, 0x88, 0xda, 0xfe, 0x4a, 0x28, 0xee, 0x3b, 0xf5, 0x41,
	0x55, 0xbf, 0x18, 0x05, 0x72, 0x08, 0xf6, 0x84, 0x45, 0xfe, 0x75, 0xe0, 0xab, 0x99, 0xd3, 0xc0,
	0x1b, 0x4b, 0x85, 0x46, 0xe7, 0x91, 0x54, 0xec, 0x42, 0xf3, 0x35, 0x53, 0x34, 0x57, 0x2c, 0x63,
	0xd0, 0x2a, 0xc6, 0xe0, 0x11, 0x6c, 0x79, 0x2c, 0xf2, 0x03, 0x9f, 0x29, 0x3e, 0x0e, 0x7c, 0xc7,
	0x46, 0xb0, 0x9d, 0xeb, 0x5e, 0xf9, 0xf4, 0x10, 0x6a, 0x2f, 0x99, 0x62, 0x4b, 0x02, 0xab, 0x40,
	0x40, 0xdf, 0x42, 0x67, 0xc4, 0xd5, 0xd7, 0xa1, 0xf0, 0x2e, 0xb2, 0x3c, 0x10, 0xa8, 0xcd, 0x98,
	0x9c, 0x19, 0x3b, 0x3c, 0xe7, 0xb1, 0xae, 0xdc, 0x1a, 0xeb, 0x6a, 0x29, 0xd6, 0x7f, 0x56, 0xa1,
	0x8e, 0x84, 0x05, 0x0b, 0xab, 0x68, 0x91, 0x7b, 0xa8, 0x14, 0x3c, 0x1c, 0x43, 0x3b, 0x66, 0x09,
	0x8f, 0xd4, 0x18, 0xa1, 0x2a, 0x42, 0x90, 0xaa, 0xce, 0xb4, 0x41, 0x1f, 0x5a, 0x9e, 0x08, 0xa2,
	0x09, 0x93, 0xdc, 0x44, 0x3b, 0x97, 0xb5, 0xa3, 0x84, 0x5f, 0xb3, 0x44, 0xc7, 0x5b, 0x23, 0x46,
	0xd2, 0x7a, 0x39, 0x8f, 0xe3, 0xf0, 0xc6, 0x44, 0xdb, 0x48, 0x3a, 0xd4, 0x2a, 0xb8, 0xe4, 0x52,
	0xb1, 0xcb, 0x18, 0x43, 0x5d, 0x75, 0x97, 0x0a, 0x72, 0x00, 0x2d, 0x6f, 0xc6, 0x82, 0x48, 0x07,
	0x54, 0x47, 0x7b, 0xdb, 0x6d, 0xa2, 0xfc, 0xca, 0xd7, 0x90, 0x7e, 0xde, 0x98, 0x85, 0x53, 0x8c,
	0xf5, 0xb6, 0xdb, 0xd4, 0xf2, 0xf3, 0x70, 0x4a, 0x8e, 0x00, 0xbc, 0xe4, 0x26, 0x56, 0x02, 0x41,
	0x40, 0xd0, 0x4e, 0x35, 0x1a, 0x26, 0x50, 0x93, 0xc1, 0x34, 0xc2, 0xba, 0xb4, 0x5d, 0x3c, 0x93,
	0x07, 0x60, 0x33, 0xcf, 0x93, 0xe3, 0x44, 0x08, 0xe5, 0xec, 0xa5, 0xdf, 0xa4, 0x15, 0xae, 0x10,
	0x4a, 0xbb, 0x52, 0x0b, 0x83, 0xdd, 0x4f, 0xab, 0x4b, 0x2d, 0x52, 0xe8, 0x01, 0xd8, 0x7e, 0x2c,
	0x0c, 0xd6, 0x4b, 0xef, 0x69, 0x05, 0x82, 0xcf, 0x60, 0x4b, 0x25, 0x2c, 0x92, 0xcc, 0xc3, 0x8e,
	0x73, 0x1e, 0x0e, 0xaa, 0x27, 0xed, 0xa7, 0xe4, 0x14, 0xfb, 0xf2, 0xf4, 0xdd, 0x12, 0x72, 0x4b,
	0x76, 0x9a, 0x54, 0x2d, 0x30, 0xf8, 0x5c, 0x3a, 0xc7, 0x58, 0xb6, 0x2d, 0xb5, 0x38, 0x43, 0x99,
	0x3e, 0x83, 0xdd, 0xac, 0x4c, 0x64, 0xa1, 0x4e, 0x7e, 0x4a, 0xc4, 0xa5, 0xc9, 0x2d, 0x9e, 0xc9,
	0x0e, 0x54, 0x94, 0xc0, 0xbc, 0xd6, 0xdc, 0x8a, 0x12, 0xf4, 0x14, 0x1a, 0xe9, 0x25, 0xf2, 0x11,
	0x34, 0x26, 0x78, 0x72, 0x2c, 0x7c, 0xd0, 0x96, 0x79, 0x50, 0x5a, 0x7a, 0x06, 0xa3, 0x5d, 0xe8,
	0x7c, 0x27, 0xa2, 0x37, 0x2c, 0x61, 0x97, 0xc6, 0x0d, 0xfd, 0xcd, 0x02, 0xfb, 0x45, 0x56, 0xcf,
	0x6b, 0x05, 0x6f, 0xad, 0x15, 0x7c, 0xb1, 0xbf, 0x2b, 0xe5, 0xfe, 0xde, 0x85, 0xea, 0x3c, 0x09,
	0x4d, 0x6d, 0xe9, 0x23, 0x79, 0x08, 0xe0, 0x89, 0x30, 0x64, 0x8a, 0x27, 0x2c, 0x34, 0x65, 0x55,
	0xd0, 0xe8, 0xa4, 0xea, 0xd6, 0x1d, 0xc7, 0xe2, 0x9a, 0x27, 0xa6, 0xb8, 0x6c, 0xad, 0x79, 0xa3,
	0x15, 0xf4, 0x2b, 0x80, 0xfc, 0x69, 0x92, 0x3c, 0x01, 0xc8, 0xdf, 0x91, 0x7d, 0xe6, 0xae, 0xf9,
	0xcc, 0xdc, 0xcc, 0x2d, 0xd8, 0xd0, 0x4f, 0xa0, 0xf9, 0xf2, 0x26, 0x62, 0x52, 0x61, 0x49, 0x9a,
	0x67, 0x9a, 0xbb, 0xb6, 0xbb, 0x54, 0x50, 0x0f, 0x5a, 0xaf, 0xb9, 0x7f, 0xae, 0x74, 0x08, 0x8a,
	0xe5, 0x69, 0x95, 0xcb, 0x53, 0xb7, 0x29, 0x0b, 0xc2, 0xbc, 0x4d, 0x59, 0x10, 0x6e, 0x6a, 0x53,
	0x1d, 0x8c, 0x30, 0x98, 0x98, 0x6f, 0xd6, 0x47, 0xfa, 0x0d, 0x6c, 0xbd, 0x2b, 0x56, 0xc4, 0x6a,
	0x25, 0x59, 0x1f, 0x56, 0x49, 0xf4, 0x53, 0xb8, 0x3f, 0xe2, 0xaa, 0x88, 0x6f, 0x9e, 0x2c, 0xf4,
	0x9f, 0x0a, 0xb4, 0x0b, 0xa6, 0x9b, 0xa6, 0x0f, 0x56, 0x9a, 0xf9, 0xac, 0x42, 0xa5, 0xa5, 0xa9,
	0xac, 0x28, 0x81, 0x13, 0x97, 0x85, 0xf3, 0x6c, 0x36, 0xa4, 0x42, 0xb9, 0xd1, 0xeb, 0xab, 0x8d,
	0xbe, 0x0f, 0x4d, 0xb5, 0x18, 0xe3, 0x60, 0x33, 0xf3, 0x41, 0x2d, 0xde, 0xe9, 0xd1, 0x96, 0x8f,
	0xfb, 0x66, 0x71, 0xdc, 0xdf, 0x31, 0x17, 0x1c, 0x68, 0xc6, 0xec, 0x26, 0x14, 0xcc, 0x37, 0x7d,
	0x9c, 0x89, 0xa5, 0x89, 0x71, 0x74, 0xd7, 0xc4, 0x78, 0xb8, 0x69, 0x62, 0x1c, 0x17, 0x26, 0xc6,
	0x11, 0x40, 0xcc, 0x6e, 0x78, 0x32, 0x46, 0x64, 0x90, 0xd6, 0x23, 0x6a, 0xce, 0x35, 0xdc, 0x87,
	0x16, 0x5f, 0x70, 0x6f, 0xae, 0x37, 0xcf, 0xa3, 0x81, 0x75, 0xd2, 0x72, 0x73, 0x99, 0xfe, 0x6c,
	0x01, 0x29, 0xe5, 0xc4, 0xe3, 0x41, 0xac, 0x4a, 0x57, 0xac, 0xf2, 0x15, 0x3d, 0x12, 0xbc, 0x78,
	0x3e, 0x9e, 0x4b, 0x36, 0xcd, 0x46, 0x7f, 0xcb, 0x8b, 0xe7, 0xdf, 0x6b, 0x59, 0x83, 0x11, 0x57,
	0x06, 0x4c, 0xf3, 0xd0, 0x8a, 0xb8, 0x4a, 0xc1, 0x3d, 0xa8, 0xf3, 0x24, 0x11, 0x49, 0x96, 0x0d,
	0x14, 0xe8, 0x1f, 0x15, 0xe8, 0x9d, 0xf3, 0xc8, 0xff, 0xb0, 0xd2, 0x28, 0x0c, 0x93, 0x95, 0x14,
	0x57, 0x37, 0xa6, 0xb8, 0x76, 0x47, 0x8a, 0xeb, 0xb7, 0xa7, 0xb8, 0xb1, 0x29, 0xc5, 0xcd, 0xff,
	0x63, 0x8a, 0xe9, 0xc7, 0xd0, 0x29, 0x84, 0xef, 0xcc, 0xb4, 0xc7, 0x5a, 0x5b, 0x3d, 0x86, 0xdd,
	0xf3, 0xf9, 0x44, 0x7a, 0x49, 0x30, 0xe1, 0x59, 0x8c, 0x7b, 0xd0, 0x50, 0x22, 0x0e, 0xbc, 0x6c,
	0xbe, 0x18, 0x89, 0x7e, 0x09, 0xdd, 0x82, 0xad, 0x8c, 0x45, 0x24, 0x31, 0x3e, 0x08, 0x67, 0x3f,
	0x17, 0x50, 0xb8, 0x6d, 0x73, 0x53, 0x07, 0x1a, 0x67, 0x9c, 0x85, 0x0a, 0x13, 0x26, 0x2e, 0x4c,
	0x15, 0x55, 0xc4, 0xc5, 0xd3, 0xdf, 0x5b, 0x00, 0xcf, 0xe3, 0xe0, 0x9c, 0x27, 0x57, 0x81, 0xc7,
	0xc9, 0xb7, 0x00, 0xcb, 0x5f, 0x7d, 0xc4, 0x31, 0x73, 0x64, 0xed, 0x87, 0x60, 0x7f, 0xc7, 0x20,
	0x46, 0x4d, 0xef, 0xfd, 0xf2, 0xd7, 0xdf, 0xbf, 0x56, 0xb6, 0x49, 0x7b, 0x78, 0xf5, 0xd9, 0x90,
	0x99, 0xeb, 0x2f, 0xa0, 0x95, 0x6d, 0x24, 0xd2, 0x5b, 0x52, 0x15, 0x7f, 0xc9, 0xf4, 0x4b, 0x3b,
	0x86, 0x76, 0x91, 0xa6, 0x4d, 0x6c, 0x4d, 0x83, 0xfb, 0x86, 0x8c, 0xc0, 0xce, 0xd7, 0x1a, 0xd9,
	0x5f, 0x61, 0xc9, 0x16, 0x5d, 0x7f, 0xbb, 0x48, 0x23, 0x29, 0x41, 0x9e, 0x2d, 0x02, 0x39, 0x8f,
	0x24, 0x2e, 0x6c, 0x8f, 0xb8, 0x2a, 0xec, 0x82, 0xec, 0x49, 0x2b, 0xdb, 0xac, 0xdf, 0x5d, 0xdd,
	0x07, 0x92, 0xf6, 0x90, 0x6f, 0x97, 0xec, 0x68, 0xbe, 0xe5, 0x72, 0x20, 0xaf, 0x30, 0x5c, 0xd9,
	0x7e, 0xd8, 0x44, 0x98, 0x05, 0xcb, 0xd8, 0x95, 0x83, 0xe5, 0x9b, 0xcb, 0x6f, 0xa1, 0x3d, 0xe2,
	0x2a, 0xdf, 0x20, 0x9b, 0xb8, 0x3a, 0x46, 0x9f, 0x19, 0xd2, 0x03, 0x24, 0xbb, 0x47, 0xba, 0x9a,
	0x2c, 0x12, 0x3e, 0x1f, 0x5e, 0x72, 0x5f, 0x22, 0xc7, 0x14, 0x7a, 0x23, 0xae, 0xde, 0xf0, 0xc8,
	0x0f, 0xa2, 0x69, 0x69, 0x6d, 0x6c, 0x62, 0xbf, 0xb7, 0xbe, 0x38, 0x24, 0x1d, 0xa0, 0x87, 0x3e,
	0x71, 0xb4, 0x87, 0xe2, 0x16, 0x19, 0xc6, 0x29, 0x35, 0xf9, 0x11, 0x76, 0xca, 0xdb, 0x84, 0x1c,
	0x2e, 0x13, 0xb5, 0x3e, 0x49, 0xfa, 0xb7, 0xec, 0x27, 0xba, 0x8f, 0x5e, 0xba, 0xa4, 0xb3, 0xe2,
	0x85, 0xbc, 0x5f, 0x5f, 0x55, 0xe9, 0x58, 0xbc, 0xdb, 0xc7, 0xc1, 0x2d, 0x3b, 0x30, 0xbd, 0x48,
	0x8f, 0xd1, 0xd5, 0x01, 0xd9, 0x5f, 0x71, 0x35, 0x4c, 0x0c, 0xb3, 0x0f, 0x9d, 0x95, 0x19, 0x48,
	0x8e, 0x0c, 0xdd, 0xed, 0xb3, 0xb1, 0xdf, 0x5b, 0xf7, 0xa6, 0xfb, 0x9e, 0xf6, 0xd1, 0xd5, 0x1e,
	0x5d, 0xfd, 0xaa, 0x2f, 0xac, 0xc7, 0xe4, 0x07, 0xb0, 0xf3, 0x9e, 0xce, 0x2b, 0x7b, 0x75, 0x22,
	0xf4, 0x9d, 0x75, 0x20, 0x6d, 0x7f, 0x7a, 0x1f, 0xb9, 0x3b, 0x64, 0x5b, 0x73, 0xcb, 0x0c, 0x7e,
	0x62, 0x91, 0xd7, 0xd0, 0x4e, 0xbb, 0xfd, 0xc5, 0x8c, 0x17, 0x5a, 0x6f, 0x35, 0xd9, 0x59, 0xcf,
	0xa4, 0xb6, 0xe5, 0x04, 0xcc, 0x50, 0xe7, 0xe9, 0xfb, 0x93, 0x06, 0xfe, 0x21, 0xfc, 0xfc, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x21, 0x2a, 0x4f, 0x42, 0x0e, 0x00, 0x00,
}
