// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package corepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Data struct {
	Type    string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Data) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Transaction struct {
	Hash    []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	From    []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To      []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value   []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Data    *Data  `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	ChainId uint32 `protobuf:"varint,6,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Alg     uint32 `protobuf:"varint,7,opt,name=alg" json:"alg,omitempty"`
	Sign    []byte `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *Transaction) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "corepb.Data")
	proto.RegisterType((*Transaction)(nil), "corepb.Transaction")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x4e, 0x84, 0x40,
	0x10, 0x86, 0xb3, 0x1c, 0x07, 0xe7, 0x1c, 0x1a, 0x9d, 0x58, 0x8c, 0xdd, 0xe6, 0x2a, 0x2a, 0x0a,
	0xf5, 0x11, 0x6c, 0x6c, 0x37, 0xf6, 0x66, 0x0e, 0xf0, 0x20, 0x41, 0x86, 0xc0, 0x68, 0x72, 0x2f,
	0xe7, 0xb3, 0x99, 0x1d, 0x34, 0xd7, 0x7d, 0xff, 0xbf, 0xf9, 0x37, 0x5f, 0x06, 0xee, 0x74, 0xe6,
	0x71, 0xe1, 0x5a, 0x7b, 0x19, 0xab, 0x69, 0x16, 0x15, 0xcc, 0x6a, 0x99, 0xdb, 0xe9, 0x78, 0x78,
	0x86, 0xf4, 0x85, 0x95, 0x11, 0x21, 0xd5, 0xf3, 0xd4, 0x92, 0xf3, 0xae, 0xbc, 0x0a, 0xc6, 0x48,
	0x90, 0x4f, 0x7c, 0x1e, 0x84, 0x1b, 0x4a, 0xbc, 0x2b, 0x8b, 0xf0, 0x1f, 0x0f, 0x3f, 0x0e, 0xf6,
	0x6f, 0x97, 0x3f, 0xe3, 0xba, 0xe3, 0xa5, 0xb3, 0x75, 0x11, 0x8c, 0x63, 0xf7, 0x31, 0xcb, 0xe7,
	0xdf, 0xd4, 0x18, 0x6f, 0x20, 0x51, 0xa1, 0x8d, 0x35, 0x89, 0x0a, 0xde, 0xc3, 0xf6, 0x9b, 0x87,
	0xaf, 0x96, 0x52, 0xab, 0xd6, 0x80, 0x1e, 0xd2, 0x86, 0x95, 0x69, 0xeb, 0x5d, 0xb9, 0x7f, 0x2c,
	0xaa, 0x55, 0xb5, 0x8a, 0x9e, 0xc1, 0x5e, 0xf0, 0x01, 0x76, 0x75, 0xc7, 0xfd, 0xf8, 0xde, 0x37,
	0x94, 0x79, 0x57, 0x5e, 0x87, 0xdc, 0xf2, 0x6b, 0x83, 0xb7, 0xb0, 0xe1, 0xe1, 0x44, 0xb9, 0xb5,
	0x11, 0xa3, 0xc8, 0xd2, 0x9f, 0x46, 0xda, 0xad, 0x22, 0x91, 0x8f, 0x99, 0x5d, 0xe1, 0xe9, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0xfd, 0x5f, 0x1a, 0x1a, 0x01, 0x00, 0x00,
}
