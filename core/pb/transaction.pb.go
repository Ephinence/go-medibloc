// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction.proto

package corepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Data struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorTransaction, []int{0} }

func (m *Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Data) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Transaction struct {
	Hash      []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	From      []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value     []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      *Data  `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	Nonce     uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ChainId   uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Alg       uint32 `protobuf:"varint,9,opt,name=alg,proto3" json:"alg,omitempty"`
	Sign      []byte `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTransaction, []int{1} }

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *Transaction) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "corepb.Data")
	proto.RegisterType((*Transaction)(nil), "corepb.Transaction")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptorTransaction) }

var fileDescriptorTransaction = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x41, 0x4f, 0xb4, 0x30,
	0x10, 0x86, 0x53, 0x60, 0x61, 0x99, 0xe5, 0xfb, 0xa2, 0x8d, 0x87, 0x31, 0xf1, 0xd0, 0xec, 0xa9,
	0x27, 0x0e, 0xea, 0x4f, 0xf0, 0xe2, 0xb5, 0xf1, 0x6e, 0x66, 0x01, 0x17, 0x12, 0x68, 0x09, 0x8c,
	0x26, 0xfb, 0xb7, 0xfd, 0x05, 0xa6, 0x83, 0x66, 0x6f, 0xcf, 0xfb, 0x34, 0xef, 0x64, 0xa6, 0x70,
	0xcb, 0x0b, 0xf9, 0x95, 0x1a, 0x1e, 0x82, 0xaf, 0xe7, 0x25, 0x70, 0xd0, 0x79, 0x13, 0x96, 0x6e,
	0x3e, 0x1d, 0x9f, 0x21, 0x7b, 0x21, 0x26, 0xad, 0x21, 0xe3, 0xcb, 0xdc, 0xa1, 0x32, 0xca, 0x96,
	0x4e, 0x58, 0x23, 0x14, 0x33, 0x5d, 0xc6, 0x40, 0x2d, 0x26, 0x46, 0xd9, 0xca, 0xfd, 0xc5, 0xe3,
	0xb7, 0x82, 0xc3, 0xdb, 0x75, 0x66, 0x6c, 0xf7, 0xb4, 0xf6, 0xd2, 0xae, 0x9c, 0x70, 0x74, 0x1f,
	0x4b, 0x98, 0x7e, 0xab, 0xc2, 0xfa, 0x3f, 0x24, 0x1c, 0x30, 0x15, 0x93, 0x70, 0xd0, 0x77, 0xb0,
	0xfb, 0xa2, 0xf1, 0xb3, 0xc3, 0x4c, 0xd4, 0x16, 0xf4, 0x03, 0x94, 0x3c, 0x4c, 0xdd, 0xca, 0x34,
	0xcd, 0xb8, 0x33, 0xca, 0xa6, 0xee, 0x2a, 0xb4, 0x81, 0xac, 0x25, 0x26, 0xcc, 0x8d, 0xb2, 0x87,
	0xc7, 0xaa, 0xde, 0x0e, 0xa9, 0xe3, 0x15, 0x4e, 0x5e, 0xe2, 0x54, 0x1f, 0x7c, 0xd3, 0x61, 0x61,
	0x94, 0xcd, 0xdc, 0x16, 0xf4, 0x3d, 0xec, 0x9b, 0x9e, 0x06, 0xff, 0x3e, 0xb4, 0xb8, 0x37, 0xca,
	0xfe, 0x73, 0x85, 0xe4, 0xd7, 0x56, 0xdf, 0x40, 0x4a, 0xe3, 0x19, 0x4b, 0xb1, 0x11, 0xe3, 0xf2,
	0xeb, 0x70, 0xf6, 0x08, 0xdb, 0xf2, 0x91, 0x4f, 0xb9, 0xfc, 0xdc, 0xd3, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf0, 0xe8, 0xc5, 0x7b, 0x4e, 0x01, 0x00, 0x00,
}
