// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

/*
Package corepb is a generated protocol buffer package.

It is generated from these files:
	block.proto

It has these top-level messages:
	BlockHeader
	Block
	DownloadParentBlock
	Transaction
	Receipt
	TransactionHashTarget
	DefaultPayload
	VotePayload
	AddCertificationPayload
	RevokeCertificationPayload
	AddRecordPayload
*/
package corepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BlockHeader struct {
	Hash         []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash   []byte `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Coinbase     []byte `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Reward       []byte `protobuf:"bytes,4,opt,name=reward,proto3" json:"reward,omitempty"`
	Supply       []byte `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
	Timestamp    int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChainId      uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Alg          uint32 `protobuf:"varint,11,opt,name=alg,proto3" json:"alg,omitempty"`
	Sign         []byte `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	AccStateRoot []byte `protobuf:"bytes,21,opt,name=acc_state_root,json=accStateRoot,proto3" json:"acc_state_root,omitempty"`
	TxStateRoot  []byte `protobuf:"bytes,22,opt,name=tx_state_root,json=txStateRoot,proto3" json:"tx_state_root,omitempty"`
	DposRoot     []byte `protobuf:"bytes,23,opt,name=dpos_root,json=dposRoot,proto3" json:"dpos_root,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHeader) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHeader) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *BlockHeader) GetReward() []byte {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *BlockHeader) GetSupply() []byte {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockHeader) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *BlockHeader) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *BlockHeader) GetAccStateRoot() []byte {
	if m != nil {
		return m.AccStateRoot
	}
	return nil
}

func (m *BlockHeader) GetTxStateRoot() []byte {
	if m != nil {
		return m.TxStateRoot
	}
	return nil
}

func (m *BlockHeader) GetDposRoot() []byte {
	if m != nil {
		return m.DposRoot
	}
	return nil
}

type Block struct {
	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	Height       uint64         `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type DownloadParentBlock struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Sign []byte `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *DownloadParentBlock) Reset()                    { *m = DownloadParentBlock{} }
func (m *DownloadParentBlock) String() string            { return proto.CompactTextString(m) }
func (*DownloadParentBlock) ProtoMessage()               {}
func (*DownloadParentBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{2} }

func (m *DownloadParentBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *DownloadParentBlock) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type Transaction struct {
	Hash      []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	TxType    string   `protobuf:"bytes,2,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	From      []byte   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value     []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce     uint64   `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ChainId   uint32   `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Payload   []byte   `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
	Alg       uint32   `protobuf:"varint,21,opt,name=alg,proto3" json:"alg,omitempty"`
	Sign      []byte   `protobuf:"bytes,22,opt,name=sign,proto3" json:"sign,omitempty"`
	PayerSign []byte   `protobuf:"bytes,23,opt,name=payerSign,proto3" json:"payerSign,omitempty"`
	Receipt   *Receipt `protobuf:"bytes,30,opt,name=receipt" json:"receipt,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{3} }

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *Transaction) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Transaction) GetPayerSign() []byte {
	if m != nil {
		return m.PayerSign
	}
	return nil
}

func (m *Transaction) GetReceipt() *Receipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type Receipt struct {
	Executed bool   `protobuf:"varint,1,opt,name=executed,proto3" json:"executed,omitempty"`
	CpuUsage []byte `protobuf:"bytes,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	NetUsage []byte `protobuf:"bytes,3,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	Error    []byte `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{4} }

func (m *Receipt) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *Receipt) GetCpuUsage() []byte {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *Receipt) GetNetUsage() []byte {
	if m != nil {
		return m.NetUsage
	}
	return nil
}

func (m *Receipt) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

type TransactionHashTarget struct {
	TxType    string `protobuf:"bytes,1,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	From      []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value     []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce     uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ChainId   uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Payload   []byte `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TransactionHashTarget) Reset()                    { *m = TransactionHashTarget{} }
func (m *TransactionHashTarget) String() string            { return proto.CompactTextString(m) }
func (*TransactionHashTarget) ProtoMessage()               {}
func (*TransactionHashTarget) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{5} }

func (m *TransactionHashTarget) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *TransactionHashTarget) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransactionHashTarget) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TransactionHashTarget) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionHashTarget) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionHashTarget) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionHashTarget) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionHashTarget) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type DefaultPayload struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DefaultPayload) Reset()                    { *m = DefaultPayload{} }
func (m *DefaultPayload) String() string            { return proto.CompactTextString(m) }
func (*DefaultPayload) ProtoMessage()               {}
func (*DefaultPayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{6} }

func (m *DefaultPayload) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type VotePayload struct {
	Candidates [][]byte `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (m *VotePayload) Reset()                    { *m = VotePayload{} }
func (m *VotePayload) String() string            { return proto.CompactTextString(m) }
func (*VotePayload) ProtoMessage()               {}
func (*VotePayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{7} }

func (m *VotePayload) GetCandidates() [][]byte {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type AddCertificationPayload struct {
	IssueTime      int64  `protobuf:"varint,1,opt,name=issue_time,json=issueTime,proto3" json:"issue_time,omitempty"`
	ExpirationTime int64  `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	Hash           []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *AddCertificationPayload) Reset()                    { *m = AddCertificationPayload{} }
func (m *AddCertificationPayload) String() string            { return proto.CompactTextString(m) }
func (*AddCertificationPayload) ProtoMessage()               {}
func (*AddCertificationPayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{8} }

func (m *AddCertificationPayload) GetIssueTime() int64 {
	if m != nil {
		return m.IssueTime
	}
	return 0
}

func (m *AddCertificationPayload) GetExpirationTime() int64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (m *AddCertificationPayload) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type RevokeCertificationPayload struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *RevokeCertificationPayload) Reset()                    { *m = RevokeCertificationPayload{} }
func (m *RevokeCertificationPayload) String() string            { return proto.CompactTextString(m) }
func (*RevokeCertificationPayload) ProtoMessage()               {}
func (*RevokeCertificationPayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{9} }

func (m *RevokeCertificationPayload) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddRecordPayload struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *AddRecordPayload) Reset()                    { *m = AddRecordPayload{} }
func (m *AddRecordPayload) String() string            { return proto.CompactTextString(m) }
func (*AddRecordPayload) ProtoMessage()               {}
func (*AddRecordPayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{10} }

func (m *AddRecordPayload) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "corepb.BlockHeader")
	proto.RegisterType((*Block)(nil), "corepb.Block")
	proto.RegisterType((*DownloadParentBlock)(nil), "corepb.DownloadParentBlock")
	proto.RegisterType((*Transaction)(nil), "corepb.Transaction")
	proto.RegisterType((*Receipt)(nil), "corepb.Receipt")
	proto.RegisterType((*TransactionHashTarget)(nil), "corepb.TransactionHashTarget")
	proto.RegisterType((*DefaultPayload)(nil), "corepb.DefaultPayload")
	proto.RegisterType((*VotePayload)(nil), "corepb.VotePayload")
	proto.RegisterType((*AddCertificationPayload)(nil), "corepb.AddCertificationPayload")
	proto.RegisterType((*RevokeCertificationPayload)(nil), "corepb.RevokeCertificationPayload")
	proto.RegisterType((*AddRecordPayload)(nil), "corepb.AddRecordPayload")
}

func init() { proto.RegisterFile("block.proto", fileDescriptorBlock) }

var fileDescriptorBlock = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x85, 0x24, 0xdb, 0xb2, 0xaf, 0x1c, 0x27, 0x60, 0x5e, 0x9a, 0x4c, 0x26, 0x63, 0x08, 0x83,
	0x99, 0xcc, 0x0c, 0x1a, 0x14, 0xed, 0xa2, 0xab, 0x2e, 0xd2, 0x66, 0x91, 0xee, 0x02, 0xc6, 0xed,
	0xd6, 0xa0, 0xa9, 0x1b, 0x5b, 0x88, 0x2d, 0x12, 0x14, 0x95, 0xd8, 0x1f, 0xd0, 0xbf, 0xeb, 0xae,
	0xfd, 0xa0, 0x82, 0xa4, 0x14, 0x39, 0x88, 0xd3, 0x76, 0xc7, 0xf3, 0x20, 0x28, 0x9e, 0x73, 0x29,
	0x88, 0x26, 0x73, 0xc1, 0x6f, 0xcf, 0xa4, 0x12, 0x5a, 0x90, 0x0e, 0x17, 0x0a, 0xe5, 0x24, 0xf9,
	0xe6, 0x43, 0xf4, 0xce, 0xf0, 0x97, 0xc8, 0x52, 0x54, 0x84, 0x40, 0x6b, 0xc6, 0x8a, 0x59, 0xec,
	0x0d, 0xbd, 0xd3, 0x3e, 0xb5, 0x6b, 0xf2, 0x27, 0x44, 0x92, 0x29, 0xcc, 0xf5, 0xd8, 0x4a, 0xbe,
	0x95, 0xc0, 0x51, 0x97, 0xc6, 0x70, 0x04, 0x5d, 0x2e, 0xb2, 0x7c, 0xc2, 0x0a, 0x8c, 0x03, 0xab,
	0x3e, 0x60, 0x72, 0x00, 0x1d, 0x85, 0xf7, 0x4c, 0xa5, 0x71, 0xcb, 0x2a, 0x15, 0x32, 0x7c, 0x51,
	0x4a, 0x39, 0x5f, 0xc5, 0x6d, 0xc7, 0x3b, 0x44, 0x8e, 0xa1, 0xa7, 0xb3, 0x05, 0x16, 0x9a, 0x2d,
	0x64, 0xdc, 0x19, 0x7a, 0xa7, 0x01, 0x6d, 0x08, 0xf2, 0x1b, 0x74, 0xf9, 0x8c, 0x65, 0xf9, 0x38,
	0x4b, 0xe3, 0x70, 0xe8, 0x9d, 0x6e, 0xd1, 0xd0, 0xe2, 0x0f, 0x29, 0xd9, 0x81, 0x80, 0xcd, 0xa7,
	0x71, 0x64, 0x59, 0xb3, 0x34, 0x77, 0x29, 0xb2, 0x69, 0x1e, 0xf7, 0xdd, 0x5d, 0xcc, 0x9a, 0xfc,
	0x05, 0x03, 0xc6, 0xf9, 0xb8, 0xd0, 0x4c, 0xe3, 0x58, 0x09, 0xa1, 0xe3, 0x7d, 0xab, 0xf6, 0x19,
	0xe7, 0xd7, 0x86, 0xa4, 0x42, 0x68, 0x92, 0xc0, 0x96, 0x5e, 0xae, 0x9b, 0x0e, 0xac, 0x29, 0xd2,
	0xcb, 0xc6, 0xf3, 0x3b, 0xf4, 0x52, 0x29, 0x0a, 0xa7, 0x1f, 0xba, 0x5b, 0x1b, 0xc2, 0x88, 0xc9,
	0x67, 0x0f, 0xda, 0x36, 0x56, 0xf2, 0x3f, 0x74, 0x66, 0x36, 0x5a, 0x1b, 0x69, 0xf4, 0x6a, 0xf7,
	0xcc, 0x25, 0x7f, 0xb6, 0x96, 0x3a, 0xad, 0x2c, 0xe4, 0x0d, 0xf4, 0xb5, 0x62, 0x79, 0xc1, 0xb8,
	0xce, 0x44, 0x5e, 0xc4, 0xfe, 0x30, 0x58, 0xdf, 0x32, 0x6a, 0x34, 0xfa, 0xc8, 0x68, 0xd2, 0x9c,
	0x61, 0x36, 0x9d, 0x69, 0x9b, 0x7f, 0x8b, 0x56, 0x28, 0x79, 0x0b, 0xbb, 0x17, 0xe2, 0x3e, 0x9f,
	0x0b, 0x96, 0x5e, 0xd9, 0xbe, 0xdc, 0x47, 0x6d, 0x6a, 0xb9, 0x4e, 0xcb, 0x6f, 0xd2, 0x4a, 0xbe,
	0xf8, 0x10, 0xad, 0x1d, 0xba, 0x71, 0xdf, 0x21, 0x84, 0x7a, 0x39, 0xd6, 0x2b, 0x89, 0x76, 0x6b,
	0x8f, 0x76, 0xf4, 0x72, 0xb4, 0x92, 0x68, 0xcc, 0x37, 0x4a, 0x2c, 0xaa, 0x89, 0xb0, 0x6b, 0x32,
	0x00, 0x5f, 0x8b, 0x6a, 0x12, 0x7c, 0x2d, 0xc8, 0x1e, 0xb4, 0xef, 0xd8, 0xbc, 0xc4, 0x6a, 0x08,
	0x1c, 0xf8, 0xc9, 0x0c, 0xec, 0x41, 0x3b, 0x17, 0x39, 0x47, 0x3b, 0x00, 0x2d, 0xea, 0xc0, 0xa3,
	0xc9, 0xe8, 0x3e, 0x9e, 0x8c, 0x18, 0x42, 0xc9, 0x56, 0x26, 0x83, 0x18, 0xec, 0x31, 0x35, 0xac,
	0x67, 0x66, 0xff, 0xe9, 0xcc, 0x1c, 0xac, 0xcd, 0xcc, 0x31, 0xf4, 0x24, 0x5b, 0xa1, 0xba, 0x36,
	0x82, 0x6b, 0xba, 0x21, 0xc8, 0xbf, 0x10, 0x2a, 0xe4, 0x98, 0x49, 0x1d, 0x9f, 0xd8, 0x86, 0xb7,
	0xeb, 0xba, 0xa8, 0xa3, 0x69, 0xad, 0x27, 0x25, 0x84, 0x15, 0x67, 0x9e, 0x0c, 0x2e, 0x91, 0x97,
	0x1a, 0x53, 0x9b, 0x66, 0x97, 0x3e, 0x60, 0x33, 0x59, 0x5c, 0x96, 0xe3, 0xb2, 0x60, 0x53, 0xac,
	0xea, 0xe8, 0x72, 0x59, 0x7e, 0x34, 0xd8, 0x88, 0x39, 0xea, 0x4a, 0xac, 0x1e, 0x5b, 0x8e, 0xda,
	0x89, 0x7b, 0xd0, 0x46, 0xa5, 0x84, 0xaa, 0x12, 0x76, 0x20, 0xf9, 0xea, 0xc1, 0xfe, 0x5a, 0x8b,
	0xe6, 0xc9, 0x8e, 0x98, 0x9a, 0xa2, 0x5e, 0xef, 0xce, 0xdb, 0xd8, 0x9d, 0xff, 0xa4, 0xbb, 0xe0,
	0x69, 0x77, 0xad, 0x67, 0xbb, 0x6b, 0x3f, 0xdb, 0x5d, 0xe7, 0xb9, 0xee, 0xc2, 0x5f, 0xec, 0x2e,
	0xf9, 0x0f, 0x06, 0x17, 0x78, 0xc3, 0xca, 0xb9, 0xbe, 0xaa, 0xda, 0x8c, 0x21, 0x5c, 0x60, 0x61,
	0x83, 0x71, 0xb7, 0xa9, 0x61, 0xf2, 0x02, 0xa2, 0x4f, 0x42, 0x63, 0x6d, 0x3c, 0x01, 0xe0, 0x2c,
	0x4f, 0xb3, 0x94, 0x69, 0x2c, 0x62, 0x6f, 0x18, 0x98, 0xff, 0x59, 0xc3, 0x24, 0x25, 0x1c, 0x9e,
	0xa7, 0xe9, 0x7b, 0x54, 0x3a, 0xbb, 0xc9, 0x38, 0x33, 0xa1, 0xd5, 0x5b, 0xff, 0x00, 0xc8, 0x8a,
	0xa2, 0xc4, 0xb1, 0xb9, 0x93, 0x3d, 0x26, 0xa0, 0x3d, 0xcb, 0x8c, 0xb2, 0x05, 0x92, 0x7f, 0x60,
	0x1b, 0x97, 0x32, 0x53, 0x76, 0x8f, 0xf3, 0xf8, 0xd6, 0x33, 0x68, 0x68, 0x6b, 0xac, 0x5f, 0x52,
	0xd0, 0xbc, 0xa4, 0xe4, 0x25, 0x1c, 0x51, 0xbc, 0x13, 0xb7, 0xb8, 0xf1, 0xe4, 0x0d, 0x6f, 0x2f,
	0xf9, 0x1b, 0x76, 0xce, 0xd3, 0x94, 0x22, 0x17, 0x2a, 0xfd, 0x81, 0x6f, 0xd2, 0xb1, 0x3f, 0xfd,
	0xd7, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x8b, 0x26, 0x76, 0x03, 0x06, 0x00, 0x00,
}
