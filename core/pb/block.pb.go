// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

package corepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlockHeader struct {
	Hash       []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash []byte `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	AccsRoot   []byte `protobuf:"bytes,3,opt,name=accs_root,json=accsRoot,proto3" json:"accs_root,omitempty"`
	TxsRoot    []byte `protobuf:"bytes,4,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	Coinbase   []byte `protobuf:"bytes,5,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Timestamp  int64  `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ChainId    uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Alg        uint32 `protobuf:"varint,8,opt,name=alg" json:"alg,omitempty"`
	Sign       []byte `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHeader) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHeader) GetAccsRoot() []byte {
	if m != nil {
		return m.AccsRoot
	}
	return nil
}

func (m *BlockHeader) GetTxsRoot() []byte {
	if m != nil {
		return m.TxsRoot
	}
	return nil
}

func (m *BlockHeader) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockHeader) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *BlockHeader) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type Block struct {
	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	Height       uint64         `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "corepb.BlockHeader")
	proto.RegisterType((*Block)(nil), "corepb.Block")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xc9, 0x76, 0xb7, 0x7f, 0xa6, 0x2b, 0x68, 0x04, 0x89, 0xab, 0x60, 0xd9, 0x53, 0x41,
	0xe8, 0x41, 0x0f, 0xde, 0x3d, 0xad, 0xd7, 0xe0, 0xbd, 0xa4, 0x69, 0x68, 0x83, 0xbb, 0x49, 0x49,
	0x72, 0xd8, 0x2f, 0xe0, 0x47, 0xf6, 0x2e, 0x49, 0x2a, 0x5b, 0x6f, 0x33, 0xef, 0xf7, 0xa6, 0xe5,
	0xbd, 0x40, 0xd9, 0x1d, 0x35, 0xff, 0x6a, 0x26, 0xa3, 0x9d, 0xc6, 0x29, 0xd7, 0x46, 0x4c, 0xdd,
	0xee, 0xc6, 0x19, 0xa6, 0x2c, 0xe3, 0x4e, 0x6a, 0x15, 0xd1, 0xfe, 0x07, 0x41, 0xf9, 0xee, 0xad,
	0x07, 0xc1, 0x7a, 0x61, 0x30, 0x86, 0xf5, 0xc8, 0xec, 0x48, 0x50, 0x85, 0xea, 0x2d, 0x0d, 0x33,
	0x7e, 0x82, 0x72, 0x62, 0x46, 0x28, 0xd7, 0x06, 0xb4, 0x0a, 0x08, 0xa2, 0x74, 0xf0, 0x86, 0x07,
	0x28, 0x18, 0xe7, 0xb6, 0x35, 0x5a, 0x3b, 0x92, 0x04, 0x9c, 0x7b, 0x81, 0x6a, 0xed, 0xf0, 0x3d,
	0xe4, 0xee, 0x3c, 0xb3, 0x75, 0x60, 0x99, 0x3b, 0x47, 0xb4, 0x83, 0x9c, 0x6b, 0xa9, 0x3a, 0x66,
	0x05, 0xd9, 0xc4, 0xb3, 0xbf, 0x1d, 0x3f, 0x42, 0xe1, 0xe4, 0x49, 0x58, 0xc7, 0x4e, 0x13, 0x49,
	0x2b, 0x54, 0x27, 0xf4, 0x22, 0xf8, 0x8f, 0xf2, 0x91, 0x49, 0xd5, 0xca, 0x9e, 0x64, 0x15, 0xaa,
	0xaf, 0x68, 0x16, 0xf6, 0x8f, 0x1e, 0x5f, 0x43, 0xc2, 0x8e, 0x03, 0xc9, 0x83, 0xea, 0x47, 0x9f,
	0xc9, 0xca, 0x41, 0x91, 0x22, 0x66, 0xf2, 0xf3, 0xfe, 0x1b, 0xc1, 0x26, 0xe4, 0xc6, 0xcf, 0x90,
	0x8e, 0x21, 0x7b, 0xc8, 0x5c, 0xbe, 0xdc, 0x36, 0xb1, 0xad, 0x66, 0x51, 0x0b, 0x9d, 0x2d, 0xf8,
	0x0d, 0xb6, 0x8b, 0x0e, 0x2d, 0x59, 0x55, 0xc9, 0xf2, 0xe4, 0xf3, 0xc2, 0xe8, 0x3f, 0x23, 0xbe,
	0xf3, 0x7f, 0x91, 0xc3, 0x18, 0xfb, 0x59, 0xd3, 0x79, 0xeb, 0xd2, 0xf0, 0x0c, 0xaf, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x90, 0xb2, 0xd2, 0xb0, 0x01, 0x00, 0x00,
}
